{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/ttcn.js"],"names":["words","str","obj","split","i","length","parserConfig","name","keywords","builtin","types","timerOps","portOps","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","visibilityModifiers","templateMatch","multiLineStrings","wordList","add","prop","hasOwnProperty","push","curPunc","indentStatements","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","afterQuote","peek","toLowerCase","test","skipToEnd","eatWhile","eat","tokenComment","match","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","ttcn","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line","block","open","close","autocomplete"],"mappings":"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","file":"static/js/96.b49abe25.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) {\n    obj[words[i]] = true;\n  }\n\n  return obj;\n}\n\nvar parserConfig = {\n  name: \"ttcn\",\n  keywords: words(\"activate address alive all alt altstep and and4b any\" + \" break case component const continue control deactivate\" + \" display do else encode enumerated except exception\" + \" execute extends extension external for from function\" + \" goto group if import in infinity inout interleave\" + \" label language length log match message mixed mod\" + \" modifies module modulepar mtc noblock not not4b nowait\" + \" of on optional or or4b out override param pattern port\" + \" procedure record recursive rem repeat return runs select\" + \" self sender set signature system template testcase to\" + \" type union value valueof var variant while with xor xor4b\"),\n  builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" + \" decomp decvalue float2int float2str hex2bit hex2int\" + \" hex2oct hex2str int2bit int2char int2float int2hex\" + \" int2oct int2str int2unichar isbound ischosen ispresent\" + \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" + \" oct2str regexp replace rnd sizeof str2bit str2float\" + \" str2hex str2int str2oct substr unichar2int unichar2char\" + \" enum2int\"),\n  types: words(\"anytype bitstring boolean char charstring default float\" + \" hexstring integer objid octetstring universal verdicttype timer\"),\n  timerOps: words(\"read running start stop timeout\"),\n  portOps: words(\"call catch check clear getcall getreply halt raise receive\" + \" reply send trigger\"),\n  configOps: words(\"create connect disconnect done kill killed map unmap\"),\n  verdictOps: words(\"getverdict setverdict\"),\n  sutOps: words(\"action\"),\n  functionOps: words(\"apply derefers refers\"),\n  verdictConsts: words(\"error fail inconc none pass\"),\n  booleanConsts: words(\"true false\"),\n  otherConsts: words(\"null NULL omit\"),\n  visibilityModifiers: words(\"private public friend\"),\n  templateMatch: words(\"complement ifpresent subset superset permutation\"),\n  multiLineStrings: true\n};\nvar wordList = [];\n\nfunction add(obj) {\n  if (obj) for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) wordList.push(prop);\n  }\n}\n\nadd(parserConfig.keywords);\nadd(parserConfig.builtin);\nadd(parserConfig.timerOps);\nadd(parserConfig.portOps);\nvar keywords = parserConfig.keywords || {},\n    builtin = parserConfig.builtin || {},\n    timerOps = parserConfig.timerOps || {},\n    portOps = parserConfig.portOps || {},\n    configOps = parserConfig.configOps || {},\n    verdictOps = parserConfig.verdictOps || {},\n    sutOps = parserConfig.sutOps || {},\n    functionOps = parserConfig.functionOps || {},\n    verdictConsts = parserConfig.verdictConsts || {},\n    booleanConsts = parserConfig.booleanConsts || {},\n    otherConsts = parserConfig.otherConsts || {},\n    types = parserConfig.types || {},\n    visibilityModifiers = parserConfig.visibilityModifiers || {},\n    templateMatch = parserConfig.templateMatch || {},\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[+\\-*&@=<>!\\/]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (ch == \"%\") {\n    stream.eatWhile(/\\b/);\n    return \"atom\";\n  }\n\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n\n  if (isOperatorChar.test(ch)) {\n    if (ch == \"@\") {\n      if (stream.match(\"try\") || stream.match(\"catch\") || stream.match(\"lazy\")) {\n        return \"keyword\";\n      }\n    }\n\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n  if (timerOps.propertyIsEnumerable(cur)) return \"def\";\n  if (configOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictOps.propertyIsEnumerable(cur)) return \"def\";\n  if (portOps.propertyIsEnumerable(cur)) return \"def\";\n  if (sutOps.propertyIsEnumerable(cur)) return \"def\";\n  if (functionOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (booleanConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (otherConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (types.propertyIsEnumerable(cur)) return \"typeName.standard\";\n  if (visibilityModifiers.propertyIsEnumerable(cur)) return \"modifier\";\n  if (templateMatch.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        var afterQuote = stream.peek(); //look if the character after the quote is like the B in '10100010'B\n\n        if (afterQuote) {\n          afterQuote = afterQuote.toLowerCase();\n          if (afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\") stream.next();\n        }\n\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n\n    maybeEnd = ch == \"*\";\n  }\n\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n} //Interface\n\n\nexport var ttcn = {\n  startState: function startState() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n      popContext(state);\n    } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") {\n        ctx = popContext(state);\n      }\n\n      if (ctx.type == \"}\") ctx = popContext(state);\n\n      while (ctx.type == \"statement\") {\n        ctx = popContext(state);\n      }\n    } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n    state.startOfLine = false;\n    return style;\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    autocomplete: wordList\n  }\n};"],"sourceRoot":""}