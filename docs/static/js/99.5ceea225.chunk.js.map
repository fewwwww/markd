{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/vbscript.js"],"names":["mkVBScript","parserConf","wordRegexp","words","RegExp","join","singleOperators","doubleOperators","singleDelimiters","brackets","identifiers","wordOperators","builtinObjsWords","knownWords","concat","isASP","keywords","atoms","builtinFuncs","builtinObjs","known","opening","middle","closing","doubleClosing","doOpening","noIndentWords","comment","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","delimiter","singleline","length","eol","eatWhile","tokenStringFactory","current","doInCurrentLine","next","startState","lastToken","nextLineIndent","ignoreKeyword","token","sol","style","substr","indexOf","tokenLexer","content","textAfter","cx","trueText","replace","unit","vbScript","vbScriptASP"],"mappings":"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","file":"static/js/99.5ceea225.chunk.js","sourcesContent":["function mkVBScript(parserConf) {\n  var ERRORCLASS = 'error';\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n  }\n\n  var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&\\\\\\\\\\\\^<>=]\");\n  var doubleOperators = new RegExp(\"^((<>)|(<=)|(>=))\");\n  var singleDelimiters = new RegExp('^[\\\\.,]');\n  var brackets = new RegExp('^[\\\\(\\\\)]');\n  var identifiers = new RegExp(\"^[A-Za-z][_A-Za-z0-9]*\");\n  var openingKeywords = ['class', 'sub', 'select', 'while', 'if', 'function', 'property', 'with', 'for'];\n  var middleKeywords = ['else', 'elseif', 'case'];\n  var endKeywords = ['next', 'loop', 'wend'];\n  var wordOperators = wordRegexp(['and', 'or', 'not', 'xor', 'is', 'mod', 'eqv', 'imp']);\n  var commonkeywords = ['dim', 'redim', 'then', 'until', 'randomize', 'byval', 'byref', 'new', 'property', 'exit', 'in', 'const', 'private', 'public', 'get', 'set', 'let', 'stop', 'on error resume next', 'on error goto 0', 'option explicit', 'call', 'me']; //This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx\n\n  var atomWords = ['true', 'false', 'nothing', 'empty', 'null']; //This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx\n\n  var builtinFuncsWords = ['abs', 'array', 'asc', 'atn', 'cbool', 'cbyte', 'ccur', 'cdate', 'cdbl', 'chr', 'cint', 'clng', 'cos', 'csng', 'cstr', 'date', 'dateadd', 'datediff', 'datepart', 'dateserial', 'datevalue', 'day', 'escape', 'eval', 'execute', 'exp', 'filter', 'formatcurrency', 'formatdatetime', 'formatnumber', 'formatpercent', 'getlocale', 'getobject', 'getref', 'hex', 'hour', 'inputbox', 'instr', 'instrrev', 'int', 'fix', 'isarray', 'isdate', 'isempty', 'isnull', 'isnumeric', 'isobject', 'join', 'lbound', 'lcase', 'left', 'len', 'loadpicture', 'log', 'ltrim', 'rtrim', 'trim', 'maths', 'mid', 'minute', 'month', 'monthname', 'msgbox', 'now', 'oct', 'replace', 'rgb', 'right', 'rnd', 'round', 'scriptengine', 'scriptenginebuildversion', 'scriptenginemajorversion', 'scriptengineminorversion', 'second', 'setlocale', 'sgn', 'sin', 'space', 'split', 'sqr', 'strcomp', 'string', 'strreverse', 'tan', 'time', 'timer', 'timeserial', 'timevalue', 'typename', 'ubound', 'ucase', 'unescape', 'vartype', 'weekday', 'weekdayname', 'year']; //This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx\n\n  var builtinConsts = ['vbBlack', 'vbRed', 'vbGreen', 'vbYellow', 'vbBlue', 'vbMagenta', 'vbCyan', 'vbWhite', 'vbBinaryCompare', 'vbTextCompare', 'vbSunday', 'vbMonday', 'vbTuesday', 'vbWednesday', 'vbThursday', 'vbFriday', 'vbSaturday', 'vbUseSystemDayOfWeek', 'vbFirstJan1', 'vbFirstFourDays', 'vbFirstFullWeek', 'vbGeneralDate', 'vbLongDate', 'vbShortDate', 'vbLongTime', 'vbShortTime', 'vbObjectError', 'vbOKOnly', 'vbOKCancel', 'vbAbortRetryIgnore', 'vbYesNoCancel', 'vbYesNo', 'vbRetryCancel', 'vbCritical', 'vbQuestion', 'vbExclamation', 'vbInformation', 'vbDefaultButton1', 'vbDefaultButton2', 'vbDefaultButton3', 'vbDefaultButton4', 'vbApplicationModal', 'vbSystemModal', 'vbOK', 'vbCancel', 'vbAbort', 'vbRetry', 'vbIgnore', 'vbYes', 'vbNo', 'vbCr', 'VbCrLf', 'vbFormFeed', 'vbLf', 'vbNewLine', 'vbNullChar', 'vbNullString', 'vbTab', 'vbVerticalTab', 'vbUseDefault', 'vbTrue', 'vbFalse', 'vbEmpty', 'vbNull', 'vbInteger', 'vbLong', 'vbSingle', 'vbDouble', 'vbCurrency', 'vbDate', 'vbString', 'vbObject', 'vbError', 'vbBoolean', 'vbVariant', 'vbDataObject', 'vbDecimal', 'vbByte', 'vbArray']; //This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx\n\n  var builtinObjsWords = ['WScript', 'err', 'debug', 'RegExp'];\n  var knownProperties = ['description', 'firstindex', 'global', 'helpcontext', 'helpfile', 'ignorecase', 'length', 'number', 'pattern', 'source', 'value', 'count'];\n  var knownMethods = ['clear', 'execute', 'raise', 'replace', 'test', 'write', 'writeline', 'close', 'open', 'state', 'eof', 'update', 'addnew', 'end', 'createobject', 'quit'];\n  var aspBuiltinObjsWords = ['server', 'response', 'request', 'session', 'application'];\n  var aspKnownProperties = ['buffer', 'cachecontrol', 'charset', 'contenttype', 'expires', 'expiresabsolute', 'isclientconnected', 'pics', 'status', //response\n  'clientcertificate', 'cookies', 'form', 'querystring', 'servervariables', 'totalbytes', //request\n  'contents', 'staticobjects', //application\n  'codepage', 'lcid', 'sessionid', 'timeout', //session\n  'scripttimeout']; //server\n\n  var aspKnownMethods = ['addheader', 'appendtolog', 'binarywrite', 'end', 'flush', 'redirect', //response\n  'binaryread', //request\n  'remove', 'removeall', 'lock', 'unlock', //application\n  'abandon', //session\n  'getlasterror', 'htmlencode', 'mappath', 'transfer', 'urlencode']; //server\n\n  var knownWords = knownMethods.concat(knownProperties);\n  builtinObjsWords = builtinObjsWords.concat(builtinConsts);\n\n  if (parserConf.isASP) {\n    builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);\n    knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);\n  }\n\n  ;\n  var keywords = wordRegexp(commonkeywords);\n  var atoms = wordRegexp(atomWords);\n  var builtinFuncs = wordRegexp(builtinFuncsWords);\n  var builtinObjs = wordRegexp(builtinObjsWords);\n  var known = wordRegexp(knownWords);\n  var stringPrefixes = '\"';\n  var opening = wordRegexp(openingKeywords);\n  var middle = wordRegexp(middleKeywords);\n  var closing = wordRegexp(endKeywords);\n  var doubleClosing = wordRegexp(['end']);\n  var doOpening = wordRegexp(['do']);\n  var noIndentWords = wordRegexp(['on error resume next', 'exit']);\n  var comment = wordRegexp(['rem']);\n\n  function indent(_stream, state) {\n    state.currentIndent++;\n  }\n\n  function dedent(_stream, state) {\n    state.currentIndent--;\n  } // tokenizers\n\n\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) {\n      return null; //return null;\n    }\n\n    var ch = stream.peek(); // Handle Comments\n\n    if (ch === \"'\") {\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    if (stream.match(comment)) {\n      stream.skipToEnd();\n      return 'comment';\n    } // Handle Number Literals\n\n\n    if (stream.match(/^((&H)|(&O))?[0-9\\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\\.]+[a-z_]/i, false)) {\n      var floatLiteral = false; // Floats\n\n      if (stream.match(/^\\d*\\.\\d+/i)) {\n        floatLiteral = true;\n      } else if (stream.match(/^\\d+\\.\\d*/)) {\n        floatLiteral = true;\n      } else if (stream.match(/^\\.\\d+/)) {\n        floatLiteral = true;\n      }\n\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return 'number';\n      } // Integers\n\n\n      var intLiteral = false; // Hex\n\n      if (stream.match(/^&H[0-9a-f]+/i)) {\n        intLiteral = true;\n      } // Octal\n      else if (stream.match(/^&O[0-7]+/i)) {\n          intLiteral = true;\n        } // Decimal\n        else if (stream.match(/^[1-9]\\d*F?/)) {\n            // Decimal literals may be \"imaginary\"\n            stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n            intLiteral = true;\n          } // Zero by itself with no other piece of number.\n          else if (stream.match(/^0(?![\\dx])/i)) {\n              intLiteral = true;\n            }\n\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return 'number';\n      }\n    } // Handle Strings\n\n\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenStringFactory(stream.current());\n      return state.tokenize(stream, state);\n    } // Handle operators and Delimiters\n\n\n    if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {\n      return 'operator';\n    }\n\n    if (stream.match(singleDelimiters)) {\n      return null;\n    }\n\n    if (stream.match(brackets)) {\n      return \"bracket\";\n    }\n\n    if (stream.match(noIndentWords)) {\n      state.doInCurrentLine = true;\n      return 'keyword';\n    }\n\n    if (stream.match(doOpening)) {\n      indent(stream, state);\n      state.doInCurrentLine = true;\n      return 'keyword';\n    }\n\n    if (stream.match(opening)) {\n      if (!state.doInCurrentLine) indent(stream, state);else state.doInCurrentLine = false;\n      return 'keyword';\n    }\n\n    if (stream.match(middle)) {\n      return 'keyword';\n    }\n\n    if (stream.match(doubleClosing)) {\n      dedent(stream, state);\n      dedent(stream, state);\n      return 'keyword';\n    }\n\n    if (stream.match(closing)) {\n      if (!state.doInCurrentLine) dedent(stream, state);else state.doInCurrentLine = false;\n      return 'keyword';\n    }\n\n    if (stream.match(keywords)) {\n      return 'keyword';\n    }\n\n    if (stream.match(atoms)) {\n      return 'atom';\n    }\n\n    if (stream.match(known)) {\n      return 'variableName.special';\n    }\n\n    if (stream.match(builtinFuncs)) {\n      return 'builtin';\n    }\n\n    if (stream.match(builtinObjs)) {\n      return 'builtin';\n    }\n\n    if (stream.match(identifiers)) {\n      return 'variable';\n    } // Handle non-detected items\n\n\n    stream.next();\n    return ERRORCLASS;\n  }\n\n  function tokenStringFactory(delimiter) {\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = 'string';\n    return function (stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"]/);\n\n        if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n\n      if (singleline) {\n        state.tokenize = tokenBase;\n      }\n\n      return OUTCLASS;\n    };\n  }\n\n  function tokenLexer(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current(); // Handle '.' connected identifiers\n\n    if (current === '.') {\n      style = state.tokenize(stream, state);\n      current = stream.current();\n\n      if (style && (style.substr(0, 8) === 'variable' || style === 'builtin' || style === 'keyword')) {\n        //|| knownWords.indexOf(current.substring(1)) > -1) {\n        if (style === 'builtin' || style === 'keyword') style = 'variable';\n        if (knownWords.indexOf(current.substr(1)) > -1) style = 'keyword';\n        return style;\n      } else {\n        return ERRORCLASS;\n      }\n    }\n\n    return style;\n  }\n\n  return {\n    startState: function startState() {\n      return {\n        tokenize: tokenBase,\n        lastToken: null,\n        currentIndent: 0,\n        nextLineIndent: 0,\n        doInCurrentLine: false,\n        ignoreKeyword: false\n      };\n    },\n    token: function token(stream, state) {\n      if (stream.sol()) {\n        state.currentIndent += state.nextLineIndent;\n        state.nextLineIndent = 0;\n        state.doInCurrentLine = 0;\n      }\n\n      var style = tokenLexer(stream, state);\n      state.lastToken = {\n        style: style,\n        content: stream.current()\n      };\n      if (style === null) style = null;\n      return style;\n    },\n    indent: function indent(state, textAfter, cx) {\n      var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n      if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit * (state.currentIndent - 1);\n      if (state.currentIndent < 0) return 0;\n      return state.currentIndent * cx.unit;\n    }\n  };\n}\n\n;\nexport var vbScript = mkVBScript({});\nexport var vbScriptASP = mkVBScript({\n  isASP: true\n});"],"sourceRoot":""}