{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/solr.js"],"names":["isStringChar","isOperatorChar","isOperatorString","tokenWord","ch","stream","state","word","peek","match","next","tokenize","tokenBase","test","parseFloat","toString","isNumber","operator","quote","escaped","eat","solr","startState","token","eatSpace"],"mappings":"qGAAA,gDAAIA,EAAe,4CACfC,EAAiB,uBACjBC,EAAmB,qBA6BvB,SAASC,EAAUC,GACjB,OAAO,SAAUC,EAAQC,GAGvB,IAFA,IAAIC,EAAOH,GAEHA,EAAKC,EAAOG,SAAqC,MAA1BJ,EAAGK,MAAMT,IACtCO,GAAQF,EAAOK,OAIjB,OADAJ,EAAMK,SAAWC,EACbV,EAAiBW,KAAKN,GAAc,WApC5C,SAAkBA,GAChB,OAAOO,WAAWP,GAAMQ,aAAeR,EAmCuBS,CAAST,GAAc,SAAmC,KAAjBF,EAAOG,OAAsB,eAA2B,UAIjK,SAASI,EAAUP,EAAQC,GACzB,IAtBqBW,EAfFC,EAqCfd,EAAKC,EAAOK,OAEhB,MADU,KAANN,EAAWE,EAAMK,UAtCFO,EAsCyBd,EArCrC,SAAUC,EAAQC,GAIvB,IAHA,IACII,EADAS,GAAU,EAGmB,OAAzBT,EAAOL,EAAOK,UAChBA,GAAQQ,GAAUC,IACtBA,GAAWA,GAAmB,MAART,EAIxB,OADKS,IAASb,EAAMK,SAAWC,GACxB,WA2BgDX,EAAeY,KAAKT,GAAKE,EAAMK,UAvBnEM,EAuB4Fb,EAtB1G,SAAUC,EAAQC,GAGvB,MAFgB,KAAZW,EAAiBZ,EAAOe,IAAI,MAA2B,KAAZH,GAAiBZ,EAAOe,IAAI,MAC3Ed,EAAMK,SAAWC,EACV,aAmBqHZ,EAAaa,KAAKT,KAAKE,EAAMK,SAAWR,EAAUC,IACzKE,EAAMK,UAAYC,EAAYN,EAAMK,SAASN,EAAQC,GAAS,KAGhE,IAAIe,EAAO,CAChBC,WAAY,WACV,MAAO,CACLX,SAAUC,IAGdW,MAAO,SAAelB,EAAQC,GAC5B,OAAID,EAAOmB,WAAmB,KACvBlB,EAAMK,SAASN,EAAQC","file":"static/js/84.eac6a58f.chunk.js","sourcesContent":["var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\nfunction isNumber(word) {\n  return parseFloat(word).toString() === word;\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) break;\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenOperator(operator) {\n  return function (stream, state) {\n    if (operator == \"|\") stream.eat(/\\|/);else if (operator == \"&\") stream.eat(/\\&/);\n    state.tokenize = tokenBase;\n    return \"operator\";\n  };\n}\n\nfunction tokenWord(ch) {\n  return function (stream, state) {\n    var word = ch;\n\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n      word += stream.next();\n    }\n\n    state.tokenize = tokenBase;\n    if (isOperatorString.test(word)) return \"operator\";else if (isNumber(word)) return \"number\";else if (stream.peek() == \":\") return \"propertyName\";else return \"string\";\n  };\n}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"') state.tokenize = tokenString(ch);else if (isOperatorChar.test(ch)) state.tokenize = tokenOperator(ch);else if (isStringChar.test(ch)) state.tokenize = tokenWord(ch);\n  return state.tokenize != tokenBase ? state.tokenize(stream, state) : null;\n}\n\nexport var solr = {\n  startState: function startState() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  }\n};"],"sourceRoot":""}