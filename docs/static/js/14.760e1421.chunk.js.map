{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/dockerfile.js","../node_modules/@codemirror/legacy-modes/mode/simple-mode.js"],"names":["from","fromRegex","RegExp","shells","shellsAsArrayRegex","join","expose","exposeRegex","instructionRegex","concat","instructionOnlyLine","instructionWithArguments","dockerFile","start","regex","sol","token","next","single","pop","double","array","arguments","push","languageData","commentTokens","line","simpleMode","states","ensureState","states_","meta","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","Rule","indent","dedent","startState","pending","copyState","s","slice","stack","tokenFunction","indentFunction","name","Error","this","val","caret","flags","ignoreCase","source","String","toRegex","apply","replace","result","asToken","stream","pend","shift","pos","text","curState","rule","matches","match","indentation","indentUnit","j","backUp","textAfter","dontIndentStates","doneIndentState","indexOf","rules","scan","dedentIfLineStart","m","exec"],"mappings":"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","file":"static/js/14.760e1421.chunk.js","sourcesContent":["import { simpleMode } from \"./simple-mode.js\";\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\nvar others = [\"arg\", \"from\", \"maintainer\", \"label\", \"env\", \"add\", \"copy\", \"volume\", \"user\", \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"]; // Collect all Dockerfile directives\n\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\nexport var dockerFile = simpleMode({\n  start: [// Block comment: This is a line starting with a comment\n  {\n    regex: /^\\s*#.*$/,\n    sol: true,\n    token: \"comment\"\n  }, {\n    regex: fromRegex,\n    token: [null, \"keyword\"],\n    sol: true,\n    next: \"from\"\n  }, // Highlight an instruction without any arguments (for convenience)\n  {\n    regex: instructionOnlyLine,\n    token: [null, \"keyword\", null, \"error\"],\n    sol: true\n  }, {\n    regex: shellsAsArrayRegex,\n    token: [null, \"keyword\", null],\n    sol: true,\n    next: \"array\"\n  }, {\n    regex: exposeRegex,\n    token: [null, \"keyword\", null],\n    sol: true,\n    next: \"expose\"\n  }, // Highlight an instruction followed by arguments\n  {\n    regex: instructionWithArguments,\n    token: [null, \"keyword\", null],\n    sol: true,\n    next: \"arguments\"\n  }, {\n    regex: /./,\n    token: null\n  }],\n  from: [{\n    regex: /\\s*$/,\n    token: null,\n    next: \"start\"\n  }, {\n    // Line comment without instruction arguments is an error\n    regex: /(\\s*)(#.*)$/,\n    token: [null, \"error\"],\n    next: \"start\"\n  }, {\n    regex: /(\\s*\\S+\\s+)(as)/i,\n    token: [null, \"keyword\"],\n    next: \"start\"\n  }, // Fail safe return to start\n  {\n    token: null,\n    next: \"start\"\n  }],\n  single: [{\n    regex: /(?:[^\\\\']|\\\\.)/,\n    token: \"string\"\n  }, {\n    regex: /'/,\n    token: \"string\",\n    pop: true\n  }],\n  double: [{\n    regex: /(?:[^\\\\\"]|\\\\.)/,\n    token: \"string\"\n  }, {\n    regex: /\"/,\n    token: \"string\",\n    pop: true\n  }],\n  array: [{\n    regex: /\\]/,\n    token: null,\n    next: \"start\"\n  }, {\n    regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n    token: \"string\"\n  }],\n  expose: [{\n    regex: /\\d+$/,\n    token: \"number\",\n    next: \"start\"\n  }, {\n    regex: /[^\\d]+$/,\n    token: null,\n    next: \"start\"\n  }, {\n    regex: /\\d+/,\n    token: \"number\"\n  }, {\n    regex: /[^\\d]+/,\n    token: null\n  }, // Fail safe return to start\n  {\n    token: null,\n    next: \"start\"\n  }],\n  arguments: [{\n    regex: /^\\s*#.*$/,\n    sol: true,\n    token: \"comment\"\n  }, {\n    regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /\"/,\n    token: \"string\",\n    push: \"double\"\n  }, {\n    regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /'/,\n    token: \"string\",\n    push: \"single\"\n  }, {\n    regex: /[^#\"']+[\\\\`]$/,\n    token: null\n  }, {\n    regex: /[^#\"']+$/,\n    token: null,\n    next: \"start\"\n  }, {\n    regex: /[^#\"']+/,\n    token: null\n  }, // Fail safe return to start\n  {\n    token: null,\n    next: \"start\"\n  }],\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n});","export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {},\n      meta = states.languageData || {},\n      hasIndentation = false;\n\n  for (var state in states) {\n    if (state != meta && states.hasOwnProperty(state)) {\n      var list = states_[state] = [],\n          orig = states[state];\n\n      for (var i = 0; i < orig.length; i++) {\n        var data = orig[i];\n        list.push(new Rule(data, states));\n        if (data.indent || data.dedent) hasIndentation = true;\n      }\n    }\n  }\n\n  return {\n    startState: function startState() {\n      return {\n        state: \"start\",\n        pending: null,\n        indent: hasIndentation ? [] : null\n      };\n    },\n    copyState: function copyState(state) {\n      var s = {\n        state: state.state,\n        pending: state.pending,\n        indent: state.indent && state.indent.slice(0)\n      };\n      if (state.stack) s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  };\n}\n;\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val;\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n\n  for (var i = 0; i < val.length; i++) {\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  }\n\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function (stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent) state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent) state.indent.pop();\n        var token = rule.token;\n        if (token && token.apply) token = token(matches);\n\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n\n          for (var j = 2; j < matches.length; j++) {\n            if (matches[j]) state.pending.push({\n              text: matches[j],\n              token: rule.token[j - 1]\n            });\n          }\n\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function (state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1) return null;\n    var pos = state.indent.length - 1,\n        rules = states[state.state];\n\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n\n      break;\n    }\n\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}"],"sourceRoot":""}