{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/yaml.js"],"names":["keywordRegex","RegExp","join","yaml","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","languageData","commentTokens","line"],"mappings":"sGAAA,gDACIA,EAAe,IAAIC,OAAO,QADnB,CAAC,OAAQ,QAAS,KAAM,MAAO,MAAO,MACJC,KAAK,OAAS,MAAO,KACvDC,EAAO,CAChBC,MAAO,SAAeC,EAAQC,GAC5B,IAAIC,EAAKF,EAAOG,OACZC,EAAMH,EAAMI,QAIhB,GAHAJ,EAAMI,SAAU,EAGN,KAANH,IAA4B,GAAdF,EAAOM,KAAY,KAAKC,KAAKP,EAAOQ,OAAOC,OAAOT,EAAOM,IAAM,KAE/E,OADAN,EAAOU,YACA,UAGT,GAAIV,EAAOW,MAAM,oCAAqC,MAAO,SAE7D,GAAIV,EAAMW,SAAWZ,EAAOa,cAAgBZ,EAAMa,OAEhD,OADAd,EAAOU,YACA,SAKT,GAJWT,EAAMW,UACfX,EAAMW,SAAU,GAGdZ,EAAOe,MAAO,CAMhB,GALAd,EAAMa,OAAS,EACfb,EAAMe,MAAO,EACbf,EAAMgB,WAAY,EAGdjB,EAAOW,MAAM,OACf,MAAO,MAKT,GAAIX,EAAOW,MAAM,OACf,MAAO,MAKT,GAAIX,EAAOW,MAAM,YACf,MAAO,OAMX,GAAIX,EAAOW,MAAM,kBAEf,MADU,KAANT,EAAWD,EAAMiB,cAA6B,KAANhB,EAAWD,EAAMiB,cAA6B,KAANhB,EAAWD,EAAMkB,aAAkBlB,EAAMkB,aACtH,OAKT,GAAIlB,EAAMkB,WAAa,IAAMf,GAAa,KAANF,EAElC,OADAF,EAAOoB,OACA,OAKT,GAAInB,EAAMiB,YAAc,IAAMd,GAAa,KAANF,EAKnC,OAJAD,EAAMa,OAAS,EACfb,EAAMe,MAAO,EACbf,EAAMgB,WAAY,EAClBjB,EAAOoB,OACA,OAKT,GAAInB,EAAMgB,UAAW,CAEnB,GAAIjB,EAAOW,MAAM,kBAEf,OADAV,EAAMW,SAAU,EACT,OAMT,GAAIZ,EAAOW,MAAM,+BACf,MAAO,WAKT,GAAyB,GAArBV,EAAMiB,aAAoBlB,EAAOW,MAAM,wBACzC,MAAO,SAGT,GAAIV,EAAMiB,YAAc,GAAKlB,EAAOW,MAAM,gCACxC,MAAO,SAKT,GAAIX,EAAOW,MAAMhB,GACf,MAAO,UAMX,OAAKM,EAAMe,MAAQhB,EAAOW,MAAM,kFAC9BV,EAAMe,MAAO,EACbf,EAAMa,OAASd,EAAOa,cACf,QAGLZ,EAAMe,MAAQhB,EAAOW,MAAM,UAC7BV,EAAMgB,WAAY,EACX,SAKThB,EAAMgB,WAAY,EAClBhB,EAAMI,QAAgB,MAANH,EAChBF,EAAOoB,OACA,OAETC,WAAY,WACV,MAAO,CACLL,MAAM,EACNC,WAAW,EACXH,OAAQ,EACRI,YAAa,EACbC,WAAY,EACZP,SAAS,EACTP,SAAS,IAGbiB,aAAc,CACZC,cAAe,CACbC,KAAM","file":"static/js/105.ac4922ee.chunk.js","sourcesContent":["var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\" + cons.join(\")|(\") + \"))$\", 'i');\nexport var yaml = {\n  token: function token(stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/)) return \"string\";\n\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd();\n      return \"string\";\n    } else if (state.literal) {\n      state.literal = false;\n    }\n\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n\n      if (stream.match('---')) {\n        return \"def\";\n      }\n      /* document end */\n\n\n      if (stream.match('...')) {\n        return \"def\";\n      }\n      /* array list item */\n\n\n      if (stream.match(/^\\s*-\\s+/)) {\n        return 'meta';\n      }\n    }\n    /* inline pairs/lists */\n\n\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{') state.inlinePairs++;else if (ch == '}') state.inlinePairs--;else if (ch == '[') state.inlineList++;else state.inlineList--;\n      return 'meta';\n    }\n    /* list separator */\n\n\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n\n\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n    /* start of value of a pair */\n\n\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) {\n        state.literal = true;\n        return 'meta';\n      }\n\n      ;\n      /* references */\n\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) {\n        return 'variable';\n      }\n      /* numbers */\n\n\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) {\n        return 'number';\n      }\n\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) {\n        return 'number';\n      }\n      /* keywords */\n\n\n      if (stream.match(keywordRegex)) {\n        return 'keyword';\n      }\n    }\n    /* pairs (associative arrays) -> key */\n\n\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n\n    if (state.pair && stream.match(/^:\\s*/)) {\n      state.pairStart = true;\n      return 'meta';\n    }\n    /* nothing found, continue */\n\n\n    state.pairStart = false;\n    state.escaped = ch == '\\\\';\n    stream.next();\n    return null;\n  },\n  startState: function startState() {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};"],"sourceRoot":""}