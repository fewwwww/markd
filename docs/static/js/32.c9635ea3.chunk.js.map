{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/commonlisp.js"],"names":["type","specialForm","assumeBody","numLiteral","symbol","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","commonLisp","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","i","languageData","commentTokens","line","block","open","close","closeBrackets","brackets"],"mappings":"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","file":"static/js/32.c9635ea3.chunk.js","sourcesContent":["var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar type;\n\nfunction readSym(stream) {\n  var ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"\\\\\") stream.next();else if (!symbol.test(ch)) {\n      stream.backUp(1);\n      break;\n    }\n  }\n\n  return stream.current();\n}\n\nfunction base(stream, state) {\n  if (stream.eatSpace()) {\n    type = \"ws\";\n    return null;\n  }\n\n  if (stream.match(numLiteral)) return \"number\";\n  var ch = stream.next();\n  if (ch == \"\\\\\") ch = stream.next();\n  if (ch == '\"') return (state.tokenize = inString)(stream, state);else if (ch == \"(\") {\n    type = \"open\";\n    return \"bracket\";\n  } else if (ch == \")\" || ch == \"]\") {\n    type = \"close\";\n    return \"bracket\";\n  } else if (ch == \";\") {\n    stream.skipToEnd();\n    type = \"ws\";\n    return \"comment\";\n  } else if (/['`,@]/.test(ch)) return null;else if (ch == \"|\") {\n    if (stream.skipTo(\"|\")) {\n      stream.next();\n      return \"variableName\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else if (ch == \"#\") {\n    var ch = stream.next();\n\n    if (ch == \"(\") {\n      type = \"open\";\n      return \"bracket\";\n    } else if (/[+\\-=\\.']/.test(ch)) return null;else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);else if (ch == \":\") {\n      readSym(stream);\n      return \"meta\";\n    } else if (ch == \"\\\\\") {\n      stream.next();\n      readSym(stream);\n      return \"string.special\";\n    } else return \"error\";\n  } else {\n    var name = readSym(stream);\n    if (name == \".\") return null;\n    type = \"symbol\";\n    if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n    if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n    if (name.charAt(0) == \"&\") return \"variableName.special\";\n    return \"variableName\";\n  }\n}\n\nfunction inString(stream, state) {\n  var escaped = false,\n      next;\n\n  while (next = stream.next()) {\n    if (next == '\"' && !escaped) {\n      state.tokenize = base;\n      break;\n    }\n\n    escaped = !escaped && next == \"\\\\\";\n  }\n\n  return \"string\";\n}\n\nfunction inComment(stream, state) {\n  var next, last;\n\n  while (next = stream.next()) {\n    if (next == \"#\" && last == \"|\") {\n      state.tokenize = base;\n      break;\n    }\n\n    last = next;\n  }\n\n  type = \"ws\";\n  return \"comment\";\n}\n\nexport var commonLisp = {\n  startState: function startState() {\n    return {\n      ctx: {\n        prev: null,\n        start: 0,\n        indentTo: 0\n      },\n      lastType: null,\n      tokenize: base\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo != \"number\") state.ctx.indentTo = state.ctx.start + 1;\n    type = null;\n    var style = state.tokenize(stream, state);\n\n    if (type != \"ws\") {\n      if (state.ctx.indentTo == null) {\n        if (type == \"symbol\" && assumeBody.test(stream.current())) state.ctx.indentTo = state.ctx.start + stream.indentUnit;else state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo == \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n\n      state.lastType = type;\n    }\n\n    if (type == \"open\") state.ctx = {\n      prev: state.ctx,\n      start: stream.column(),\n      indentTo: null\n    };else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n  indent: function indent(state) {\n    var i = state.ctx.indentTo;\n    return typeof i == \"number\" ? i : state.ctx.start + 1;\n  },\n  languageData: {\n    commentTokens: {\n      line: \";;\",\n      block: {\n        open: \"#|\",\n        close: \"|#\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    }\n  }\n};"],"sourceRoot":""}