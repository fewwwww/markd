{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/scheme.js"],"names":["makeKeywords","str","obj","words","split","i","length","keywords","indentKeys","stateStack","indent","type","prev","this","pushStack","state","indentStack","binaryMatcher","RegExp","octalMatcher","hexMatcher","decimalMatcher","isBinaryNumber","stream","match","isOctalNumber","isDecimalNumber","backup","backUp","isHexNumber","scheme","startState","indentation","mode","sExprComment","sExprQuote","token","sol","eatSpace","returnType","escaped","next","maybeEnd","peek","eatWhile","ch","eat","numTest","hasExactness","hasRadix","test","skipToEnd","letter","keyWord","indentTemp","column","propertyIsEnumerable","eol","current","popStack","languageData","closeBrackets","brackets","commentTokens","line"],"mappings":"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","file":"static/js/80.8ff62cae.chunk.js","sourcesContent":["var BUILTIN = \"builtin\",\n    COMMENT = \"comment\",\n    STRING = \"string\",\n    ATOM = \"atom\",\n    NUMBER = \"number\",\n    BRACKET = \"bracket\";\nvar INDENT_WORD_SKIP = 2;\n\nfunction makeKeywords(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) {\n    obj[words[i]] = true;\n  }\n\n  return obj;\n}\n\nvar keywords = makeKeywords(\"Î» case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\nvar indentKeys = makeKeywords(\"define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless\");\n\nfunction stateStack(indent, type, prev) {\n  // represents a state stack object\n  this.indent = indent;\n  this.type = type;\n  this.prev = prev;\n}\n\nfunction pushStack(state, indent, type) {\n  state.indentStack = new stateStack(indent, type, state.indentStack);\n}\n\nfunction popStack(state) {\n  state.indentStack = state.indentStack.prev;\n}\n\nvar binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\nvar octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\nvar hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\nvar decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\nfunction isBinaryNumber(stream) {\n  return stream.match(binaryMatcher);\n}\n\nfunction isOctalNumber(stream) {\n  return stream.match(octalMatcher);\n}\n\nfunction isDecimalNumber(stream, backup) {\n  if (backup === true) {\n    stream.backUp(1);\n  }\n\n  return stream.match(decimalMatcher);\n}\n\nfunction isHexNumber(stream) {\n  return stream.match(hexMatcher);\n}\n\nexport var scheme = {\n  startState: function startState() {\n    return {\n      indentStack: null,\n      indentation: 0,\n      mode: false,\n      sExprComment: false,\n      sExprQuote: false\n    };\n  },\n  token: function token(stream, state) {\n    if (state.indentStack == null && stream.sol()) {\n      // update indentation, but only if indentStack is empty\n      state.indentation = stream.indentation();\n    } // skip spaces\n\n\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var returnType = null;\n\n    switch (state.mode) {\n      case \"string\":\n        // multi-line string parsing mode\n        var next,\n            escaped = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == \"\\\"\" && !escaped) {\n            state.mode = false;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        returnType = STRING; // continue on in scheme-string mode\n\n        break;\n\n      case \"comment\":\n        // comment parsing mode\n        var next,\n            maybeEnd = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == \"#\" && maybeEnd) {\n            state.mode = false;\n            break;\n          }\n\n          maybeEnd = next == \"|\";\n        }\n\n        returnType = COMMENT;\n        break;\n\n      case \"s-expr-comment\":\n        // s-expr commenting mode\n        state.mode = false;\n\n        if (stream.peek() == \"(\" || stream.peek() == \"[\") {\n          // actually start scheme s-expr commenting mode\n          state.sExprComment = 0;\n        } else {\n          // if not we just comment the entire of the next token\n          stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n\n          returnType = COMMENT;\n          break;\n        }\n\n      default:\n        // default parsing mode\n        var ch = stream.next();\n\n        if (ch == \"\\\"\") {\n          state.mode = \"string\";\n          returnType = STRING;\n        } else if (ch == \"'\") {\n          if (stream.peek() == \"(\" || stream.peek() == \"[\") {\n            if (typeof state.sExprQuote != \"number\") {\n              state.sExprQuote = 0;\n            } // else already in a quoted expression\n\n\n            returnType = ATOM;\n          } else {\n            stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n            returnType = ATOM;\n          }\n        } else if (ch == '#') {\n          if (stream.eat(\"|\")) {\n            // Multi-line comment\n            state.mode = \"comment\"; // toggle to comment mode\n\n            returnType = COMMENT;\n          } else if (stream.eat(/[tf]/i)) {\n            // #t/#f (atom)\n            returnType = ATOM;\n          } else if (stream.eat(';')) {\n            // S-Expr comment\n            state.mode = \"s-expr-comment\";\n            returnType = COMMENT;\n          } else {\n            var numTest = null,\n                hasExactness = false,\n                hasRadix = true;\n\n            if (stream.eat(/[ei]/i)) {\n              hasExactness = true;\n            } else {\n              stream.backUp(1); // must be radix specifier\n            }\n\n            if (stream.match(/^#b/i)) {\n              numTest = isBinaryNumber;\n            } else if (stream.match(/^#o/i)) {\n              numTest = isOctalNumber;\n            } else if (stream.match(/^#x/i)) {\n              numTest = isHexNumber;\n            } else if (stream.match(/^#d/i)) {\n              numTest = isDecimalNumber;\n            } else if (stream.match(/^[-+0-9.]/, false)) {\n              hasRadix = false;\n              numTest = isDecimalNumber; // re-consume the initial # if all matches failed\n            } else if (!hasExactness) {\n              stream.eat('#');\n            }\n\n            if (numTest != null) {\n              if (hasRadix && !hasExactness) {\n                // consume optional exactness after radix\n                stream.match(/^#[ei]/i);\n              }\n\n              if (numTest(stream)) returnType = NUMBER;\n            }\n          }\n        } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) {\n          // match non-prefixed number, must be decimal\n          returnType = NUMBER;\n        } else if (ch == \";\") {\n          // comment\n          stream.skipToEnd(); // rest of the line is a comment\n\n          returnType = COMMENT;\n        } else if (ch == \"(\" || ch == \"[\") {\n          var keyWord = '';\n          var indentTemp = stream.column(),\n              letter;\n          /**\n             Either\n             (indent-word ..\n             (non-indent-word ..\n             (;something else, bracket, etc.\n          */\n\n          while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n            keyWord += letter;\n          }\n\n          if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) {\n            // indent-word\n            pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n          } else {\n            // non-indent word\n            // we continue eating the spaces\n            stream.eatSpace();\n\n            if (stream.eol() || stream.peek() == \";\") {\n              // nothing significant after\n              // we restart indentation 1 space after\n              pushStack(state, indentTemp + 1, ch);\n            } else {\n              pushStack(state, indentTemp + stream.current().length, ch); // else we match\n            }\n          }\n\n          stream.backUp(stream.current().length - 1); // undo all the eating\n\n          if (typeof state.sExprComment == \"number\") state.sExprComment++;\n          if (typeof state.sExprQuote == \"number\") state.sExprQuote++;\n          returnType = BRACKET;\n        } else if (ch == \")\" || ch == \"]\") {\n          returnType = BRACKET;\n\n          if (state.indentStack != null && state.indentStack.type == (ch == \")\" ? \"(\" : \"[\")) {\n            popStack(state);\n\n            if (typeof state.sExprComment == \"number\") {\n              if (--state.sExprComment == 0) {\n                returnType = COMMENT; // final closing bracket\n\n                state.sExprComment = false; // turn off s-expr commenting mode\n              }\n            }\n\n            if (typeof state.sExprQuote == \"number\") {\n              if (--state.sExprQuote == 0) {\n                returnType = ATOM; // final closing bracket\n\n                state.sExprQuote = false; // turn off s-expr quote mode\n              }\n            }\n          }\n        } else {\n          stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n          if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n            returnType = BUILTIN;\n          } else returnType = \"variable\";\n        }\n\n    }\n\n    return typeof state.sExprComment == \"number\" ? COMMENT : typeof state.sExprQuote == \"number\" ? ATOM : returnType;\n  },\n  indent: function indent(state) {\n    if (state.indentStack == null) return state.indentation;\n    return state.indentStack.indent;\n  },\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    },\n    commentTokens: {\n      line: \";;\"\n    }\n  }\n};"],"sourceRoot":""}