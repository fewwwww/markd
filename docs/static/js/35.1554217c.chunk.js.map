{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/d.js"],"names":["words","str","obj","split","i","length","curPunc","parserConfig","keywords","blockKeywords","builtin","atoms","hooks","stream","_state","eatWhile","statementIndentUnit","multiLineStrings","isOperatorChar","tokenBase","state","quote","ch","next","result","tokenize","escaped","end","test","eat","tokenNestedComment","tokenComment","skipToEnd","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","d","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close"],"mappings":"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","file":"static/js/35.1554217c.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) {\n    obj[words[i]] = true;\n  }\n\n  return obj;\n}\n\nvar blockKeywords = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" + \"out scope struct switch try union unittest version while with\";\nvar parserConfig = {\n  keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" + \"debug default delegate delete deprecated export extern final finally function goto immutable \" + \"import inout invariant is lazy macro module new nothrow override package pragma private \" + \"protected public pure ref return shared short static super synchronized template this \" + \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" + blockKeywords),\n  blockKeywords: words(blockKeywords),\n  builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" + \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n  atoms: words(\"exit failure success true false null\"),\n  hooks: {\n    \"@\": function _(stream, _state) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    }\n  }\n};\nvar statementIndentUnit = parserConfig.statementIndentUnit,\n    keywords = parserConfig.keywords,\n    builtin = parserConfig.builtin,\n    blockKeywords = parserConfig.blockKeywords,\n    atoms = parserConfig.atoms,\n    hooks = parserConfig.hooks,\n    multiLineStrings = parserConfig.multiLineStrings;\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (hooks[ch]) {\n    var result = hooks[ch](stream, state);\n    if (result !== false) return result;\n  }\n\n  if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n\n  if (ch == \"/\") {\n    if (stream.eat(\"+\")) {\n      state.tokenize = tokenNestedComment;\n      return tokenNestedComment(stream, state);\n    }\n\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"keyword\";\n  }\n\n  if (builtin.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"builtin\";\n  }\n\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n\n    maybeEnd = ch == \"*\";\n  }\n\n  return \"comment\";\n}\n\nfunction tokenNestedComment(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n\n    maybeEnd = ch == \"+\";\n  }\n\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n} // Interface\n\n\nexport var d = {\n  startState: function startState(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    if (ctx.align == null) ctx.align = true;\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") {\n        ctx = popContext(state);\n      }\n\n      if (ctx.type == \"}\") ctx = popContext(state);\n\n      while (ctx.type == \"statement\") {\n        ctx = popContext(state);\n      }\n    } else if (curPunc == ctx.type) popContext(state);else if ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return null;\n    var ctx = state.context,\n        firstChar = textAfter && textAfter.charAt(0);\n    if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n    var closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || cx.unit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    }\n  }\n};"],"sourceRoot":""}