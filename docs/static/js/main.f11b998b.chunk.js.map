{"version":3,"sources":["shim.js","use-codemirror.js","editor.js","runmode.js","remark-code.js","preview.js","App.js","index.js"],"names":["global","process","window","syntaxHighlighting","HighlightStyle","define","tag","tags","heading1","fontSize","fontWeight","heading2","heading3","useCodeMirror","props","refContainer","useRef","useState","editorView","setEditorView","onChange","useEffect","current","startState","EditorState","create","doc","initialDoc","extensions","keymap","of","defaultKeymap","historyKeymap","lineNumbers","highlightActiveLineGutter","history","indentOnInput","bracketMatching","defaultHighlightStyle","fallback","highlightActiveLine","markdown","base","markdownLanguage","codeLanguages","languages","addKeymap","oneDark","EditorView","lineWrapping","updateListener","update","changes","state","view","parent","Editor","handleChange","useCallback","toString","style","height","flex","ref","findLanguage","langName","i","findIndex","lang","alias","indexOf","runmode","textContent","language","callback","tree","parser","parse","pos","highlightTree","oneDarkHighlightStyle","match","from","to","classes","slice","length","RemarkCode","spans","setSpans","className","substr","a","async","desc","load","langSupport","getLanguage","then","body","children","Array","tokens","text","_from","_to","push","map","span","key","schema","defaultSchema","attributes","code","Preview","unified","use","remarkParse","remarkGfm","remarkReact","createElement","React","sanitize","remarkReactComponents","processSync","result","padding","boxSizing","overflow","backgroundColor","color","minHeight","App","setDoc","handleDocChange","newDoc","display","flexDirection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f11b998b.chunk.js","sourcesContent":["import process from 'process'\n\nif (typeof global === 'undefined' || typeof global.process === 'undefined') {\n    window.global = window\n    window.process = process\n}","import { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { lineNumbers, highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle, HighlightStyle, tags } from '@codemirror/highlight'\nimport { markdown, markdownLanguage } from '@codemirror/lang-markdown'\nimport { languages } from '@codemirror/language-data'\nimport { oneDark } from '@codemirror/theme-one-dark'\n\nconst syntaxHighlighting = HighlightStyle.define([\n  {\n    tag: tags.heading1,\n    fontSize: '1.6em',\n    fontWeight: 'bold'\n  },\n  {\n    tag: tags.heading2,\n    fontSize: '1.4em',\n    fontWeight: 'bold'\n  },\n  {\n    tag: tags.heading3,\n    fontSize: '1.2em',\n    fontWeight: 'bold'\n  }\n])\n\nconst useCodeMirror = (props) => {\n  const refContainer = useRef(null)\n  const [editorView, setEditorView] = useState()\n  const { onChange } = props\n\n  useEffect(() => {\n    if (!refContainer.current) return\n\n    const startState = EditorState.create({\n      doc: props.initialDoc,\n      extensions: [\n        keymap.of([...defaultKeymap, ...historyKeymap]),\n        lineNumbers(),\n        highlightActiveLineGutter(),\n        history(),\n        indentOnInput(),\n        bracketMatching(),\n        defaultHighlightStyle.fallback,\n        highlightActiveLine(),\n        markdown({\n          base: markdownLanguage,\n          codeLanguages: languages,\n          addKeymap: true\n        }),\n        oneDark,\n        syntaxHighlighting,\n        EditorView.lineWrapping,\n        EditorView.updateListener.of(update => {\n          if (update.changes) {\n            onChange && onChange(update.state)\n          }\n        })\n      ]\n    })\n\n    const view = new EditorView({\n      state: startState,\n      parent: refContainer.current\n    })\n    setEditorView(view)\n  }, [refContainer])\n\n  return [refContainer, editorView]\n}\n\nexport default useCodeMirror","import React, { useCallback, useEffect } from 'react'\nimport useCodeMirror from './use-codemirror'\n\nconst Editor = ({ onChange, initialDoc }) => {\n    const handleChange = useCallback(\n        state => onChange(state.doc.toString())\n    ,[onChange])\n\n    const [refContainer, editorView] = useCodeMirror({\n        initialDoc: initialDoc,\n        onChange: handleChange\n    })\n\n    useEffect(() => {\n        if (editorView) {\n\n        }\n    }, [editorView])\n\n    return (\n        <div\n            style={{height: '100%', flex: '0 0 50%'}}\n            ref={refContainer}\n        >\n        </div>\n    )\n}\n\nexport default Editor","import { highlightTree } from '@codemirror/highlight'\nimport { languages } from '@codemirror/language-data'\nimport { oneDarkHighlightStyle } from '@codemirror/theme-one-dark'\n\nfunction runmode(\n  textContent,\n  language,\n  callback\n) {\n  const tree = language.parser.parse(textContent)\n  let pos = 0\n  highlightTree(tree, oneDarkHighlightStyle.match, (from, to, classes) => {\n    if (from > pos) {\n      callback(textContent.slice(pos, from), null, pos, from)\n    }\n    callback(textContent.slice(from, to), classes, from, to)\n    pos = to\n  })\n  if (pos !== tree.length) {\n    callback(textContent.slice(pos, tree.length), null, pos, tree.length)\n  }\n}\n\nexport function findLanguage(langName) {\n  const i = languages.findIndex((lang) => {\n    if (lang.alias.indexOf(langName) >= 0) {\n      return true\n    }\n  })\n  if (i >= 0) {\n    return languages[i]\n  } else {\n    return null\n  }\n}\n\nexport async function getLanguage(langName) {\n  const desc = findLanguage(langName)\n  if (desc) {\n    const langSupport = await desc.load()\n    return langSupport.language\n  } else {\n    return null\n  }\n}\n\nexport default runmode","import React, { useEffect, useState } from 'react'\nimport runmode, { getLanguage } from './runmode'\n\nconst RemarkCode = props => {\n  const [spans, setSpans] = useState([])\n  const { className } = props\n  const langName = (className || '').substr(9)\n\n  useEffect(() => {\n    getLanguage(langName).then(language => {\n      if (language) {\n        const body = props.children instanceof Array ? props.children[0] : null\n        const tokens = []\n        runmode(\n          body,\n          language,\n          (text, style, _from, _to) => {\n            tokens.push({ text, style })\n          }\n        )\n        setSpans(tokens)\n      }\n    })\n  }, [props.children])\n\n  if (spans.length > 0) {\n    return (\n      <code>\n        {spans.map((span, i) => (\n          <span key={i} className={span.style || ''}>\n            {span.text}\n          </span>\n        ))}\n      </code>\n    )\n  } else {\n\n    return <code>{props.children}</code>\n  }\n}\n\nexport default RemarkCode","import React from 'react'\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse/lib'\nimport remarkGfm from 'remark-gfm'\nimport remarkReact from 'remark-react/lib'\nimport RemarkCode from './remark-code'\nimport { defaultSchema } from 'hast-util-sanitize'\nimport 'github-markdown-css'\n\nconst schema = {\n    ...defaultSchema,\n    attributes: {\n      ...defaultSchema.attributes,\n      code: [...(defaultSchema.attributes?.code || []), 'className']\n    }\n  }\n\nconst Preview = (props) => {\n    const markdown = unified()\n        .use(remarkParse)\n        .use(remarkGfm)\n        .use(remarkReact, {\n            createElement: React.createElement,\n            sanitize: schema,\n            remarkReactComponents: {\n              code: RemarkCode\n            }\n          })\n        .processSync(props.doc).result\n\n    return (\n        <div\n            style={{\n                flex: '0 0 50%',\n                padding: '12px',\n                boxSizing: 'border-box',\n                overflow: 'auto',\n                backgroundColor: '#272D3B',\n                color: '#C9CAC3',\n                height: 'auto',\n                minHeight: '100vh'\n            }}\n        >\n            {markdown}\n        </div>\n    )\n}\n\nexport default Preview","import React, { useCallback, useState } from 'react';\nimport Editor from './editor'\nimport Preview from './preview';\n\nconst App = () => {\n  const [doc, setDoc] = useState('# Hello World!\\n')\n  const handleDocChange = useCallback( newDoc => {\n    setDoc(newDoc)\n  }, [])\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        backgroundColor: 'transparent',\n        display: 'flex',\n        flexDirection: 'row'\n      }}\n    >\n      <Editor\n        onChange={handleDocChange}\n        initialDoc={doc}\n      />\n      <Preview\n        doc={doc}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './shim'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}