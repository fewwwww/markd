{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/ebnf.js"],"names":["commentType","stateType","ebnf","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","skipToEnd","indexOf","eatSpace"],"mappings":"qGAAA,gDAAIA,EACK,EADLA,EAEW,EAEXC,EACO,EADPA,EAEO,EAFPA,EAGc,EAEPC,EAAO,CAChBC,WAAY,WACV,MAAO,CACLC,WAAY,KACZJ,YAAa,KACbK,OAAQ,EACRC,KAAK,EACLC,WAAY,KACZC,MAAO,GACPC,cAAc,IAGlBC,MAAO,SAAeC,EAAQC,GAC5B,GAAKD,EAAL,CAsBA,OApB2B,IAAvBC,EAAMJ,MAAMK,SAEO,KAAjBF,EAAOG,QAAkC,KAAjBH,EAAOG,QACjCF,EAAMR,WAAaO,EAAOG,OAC1BH,EAAOI,OAEPH,EAAMJ,MAAMQ,QAAQf,IACXU,EAAOM,MAAM,OAEtBL,EAAMJ,MAAMQ,QAAQf,GACpBW,EAAMZ,YAAcA,GACXW,EAAOM,MAAM,QAEtBL,EAAMJ,MAAMQ,QAAQf,GACpBW,EAAMZ,YAAcA,IAMhBY,EAAMJ,MAAM,IAClB,KAAKP,EACH,KAAOW,EAAMJ,MAAM,KAAOP,IAAsBU,EAAOO,OACjDP,EAAOG,SAAWF,EAAMR,YAC1BO,EAAOI,OAEPH,EAAMJ,MAAMW,SACe,OAAlBR,EAAOG,QAChBH,EAAOI,OACPJ,EAAOI,QAEPJ,EAAOM,MAAM,gBAIjB,OAAOL,EAAMN,IAAM,WAAa,SAGlC,KAAKL,EACH,KAAOW,EAAMJ,MAAM,KAAOP,IAAsBU,EAAOO,OACjDN,EAAMZ,cAAgBA,GAAqBW,EAAOM,MAAM,OAC1DL,EAAMJ,MAAMW,QAEZP,EAAMZ,YAAc,MACXY,EAAMZ,cAAgBA,GAA2BW,EAAOM,MAAM,OACvEL,EAAMJ,MAAMW,QAEZP,EAAMZ,YAAc,MAEpBW,EAAOM,MAAM,YAIjB,MAAO,UAET,KAAKhB,EACH,KAAOW,EAAMJ,MAAM,KAAOP,IAA6BU,EAAOO,OACtDP,EAAOM,MAAM,cAAgBN,EAAOM,MAAM,MAC9CL,EAAMJ,MAAMW,QAIhB,MAAO,WAGX,IAAIL,EAAOH,EAAOG,OAElB,OAAQA,GACN,IAAK,IAGH,OAFAH,EAAOI,OACPH,EAAMJ,MAAMQ,QAAQf,GACb,UAET,IAAK,IACL,IAAK,IACL,IAAK,IAEH,OADAU,EAAOI,OACA,WAET,IAAK,IACH,GAAIJ,EAAOM,MAAM,MACf,MAAO,SACF,GAAIN,EAAOM,MAAM,gBACtB,MAAO,UACF,GAAIN,EAAOM,MAAM,UACtB,MAAO,UAGT,MAEF,IAAK,IACH,GAAIN,EAAOM,MAAM,iBACf,MAAO,UAGX,IAAK,KACH,GAAIN,EAAOM,MAAM,aACf,MAAO,iBAGX,IAAK,IACH,GAAIN,EAAOM,MAAM,KACf,MAAO,OAGX,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACH,GAAIN,EAAOM,MAAMH,GACf,MAAO,OAGX,IAAK,IACH,GAAIH,EAAOM,MAAM,MACf,MAAO,UACF,GAAIN,EAAOM,MAAM,aACtB,MAAO,uBAGX,IAAK,IACH,GAAIN,EAAOM,MAAM,kBACf,MAAO,UAKb,OAAIN,EAAOM,MAAM,OACfN,EAAOS,YACA,WACET,EAAOM,MAAM,UACf,WACEN,EAAOM,MAAM,2BAClBN,EAAOM,MAAM,aACR,WACEN,EAAOM,MAAM,mBACf,MAGF,wBACkD,GAAhD,CAAC,IAAK,IAAK,IAAK,KAAKI,QAAQV,EAAOG,SAC7CH,EAAOI,OACA,YACGJ,EAAOW,YACjBX,EAAOI,OAGF","file":"static/js/39.e9436ad9.chunk.js","sourcesContent":["var commentType = {\n  slash: 0,\n  parenthesis: 1\n};\nvar stateType = {\n  comment: 0,\n  _string: 1,\n  characterClass: 2\n};\nexport var ebnf = {\n  startState: function startState() {\n    return {\n      stringType: null,\n      commentType: null,\n      braced: 0,\n      lhs: true,\n      localState: null,\n      stack: [],\n      inDefinition: false\n    };\n  },\n  token: function token(stream, state) {\n    if (!stream) return; //check for state changes\n\n    if (state.stack.length === 0) {\n      //strings\n      if (stream.peek() == '\"' || stream.peek() == \"'\") {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n\n        state.stack.unshift(stateType._string);\n      } else if (stream.match('/*')) {\n        //comments starting with /*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.slash;\n      } else if (stream.match('(*')) {\n        //comments starting with (*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.parenthesis;\n      }\n    } //return state\n    //stack has\n\n\n    switch (state.stack[0]) {\n      case stateType._string:\n        while (state.stack[0] === stateType._string && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n\n            state.stack.shift(); // Clear flag\n          } else if (stream.peek() === \"\\\\\") {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n\n        return state.lhs ? \"property\" : \"string\";\n      // Token style\n\n      case stateType.comment:\n        while (state.stack[0] === stateType.comment && !stream.eol()) {\n          if (state.commentType === commentType.slash && stream.match('*/')) {\n            state.stack.shift(); // Clear flag\n\n            state.commentType = null;\n          } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n            state.stack.shift(); // Clear flag\n\n            state.commentType = null;\n          } else {\n            stream.match(/^.[^\\*]*/);\n          }\n        }\n\n        return \"comment\";\n\n      case stateType.characterClass:\n        while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n          if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n            state.stack.shift();\n          }\n        }\n\n        return \"operator\";\n    }\n\n    var peek = stream.peek(); //no stack\n\n    switch (peek) {\n      case \"[\":\n        stream.next();\n        state.stack.unshift(stateType.characterClass);\n        return \"bracket\";\n\n      case \":\":\n      case \"|\":\n      case \";\":\n        stream.next();\n        return \"operator\";\n\n      case \"%\":\n        if (stream.match(\"%%\")) {\n          return \"header\";\n        } else if (stream.match(/[%][A-Za-z]+/)) {\n          return \"keyword\";\n        } else if (stream.match(/[%][}]/)) {\n          return \"bracket\";\n        }\n\n        break;\n\n      case \"/\":\n        if (stream.match(/[\\/][A-Za-z]+/)) {\n          return \"keyword\";\n        }\n\n      case \"\\\\\":\n        if (stream.match(/[\\][a-z]+/)) {\n          return \"string.special\";\n        }\n\n      case \".\":\n        if (stream.match(\".\")) {\n          return \"atom\";\n        }\n\n      case \"*\":\n      case \"-\":\n      case \"+\":\n      case \"^\":\n        if (stream.match(peek)) {\n          return \"atom\";\n        }\n\n      case \"$\":\n        if (stream.match(\"$$\")) {\n          return \"builtin\";\n        } else if (stream.match(/[$][0-9]+/)) {\n          return \"variableName.special\";\n        }\n\n      case \"<\":\n        if (stream.match(/<<[a-zA-Z_]+>>/)) {\n          return \"builtin\";\n        }\n\n    }\n\n    if (stream.match('//')) {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.match('return')) {\n      return \"operator\";\n    } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n      if (stream.match(/(?=[\\(.])/)) {\n        return \"variable\";\n      } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n        return \"def\";\n      }\n\n      return \"variableName.special\";\n    } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n      stream.next();\n      return \"bracket\";\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n\n    return null;\n  }\n};"],"sourceRoot":""}