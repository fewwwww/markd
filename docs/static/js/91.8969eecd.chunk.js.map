{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/tiddlywiki.js"],"names":["textwords","keywords","isSpaceName","reHR","reWikiCommentStart","reWikiCommentStop","reBlockQuote","reJsCodeStart","reJsCodeStop","reXmlCodeStart","reXmlCodeStop","reCodeBlockStart","reCodeBlockStop","reUntilCodeStop","chain","stream","state","f","tokenize","tokenBase","sol","ch","peek","block","test","match","twTokenCode","next","skipToEnd","eatWhile","eat","twTokenComment","twTokenEm","twTokenUnderline","twTokenStrike","twTokenStrong","twTokenMacro","propertyIsEnumerable","current","maybeEnd","sb","tiddlyWiki","startState","token","eatSpace"],"mappings":"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","file":"static/js/91.8969eecd.chunk.js","sourcesContent":["// Tokenizer\nvar textwords = {};\nvar keywords = {\n  \"allTags\": true,\n  \"closeAll\": true,\n  \"list\": true,\n  \"newJournal\": true,\n  \"newTiddler\": true,\n  \"permaview\": true,\n  \"saveChanges\": true,\n  \"search\": true,\n  \"slider\": true,\n  \"tabs\": true,\n  \"tag\": true,\n  \"tagging\": true,\n  \"tags\": true,\n  \"tiddler\": true,\n  \"timeline\": true,\n  \"today\": true,\n  \"version\": true,\n  \"option\": true,\n  \"with\": true,\n  \"filter\": true\n};\nvar isSpaceName = /[\\w_\\-]/i,\n    reHR = /^\\-\\-\\-\\-+$/,\n    // <hr>\nreWikiCommentStart = /^\\/\\*\\*\\*$/,\n    // /***\nreWikiCommentStop = /^\\*\\*\\*\\/$/,\n    // ***/\nreBlockQuote = /^<<<$/,\n    reJsCodeStart = /^\\/\\/\\{\\{\\{$/,\n    // //{{{ js block start\nreJsCodeStop = /^\\/\\/\\}\\}\\}$/,\n    // //}}} js stop\nreXmlCodeStart = /^<!--\\{\\{\\{-->$/,\n    // xml block start\nreXmlCodeStop = /^<!--\\}\\}\\}-->$/,\n    // xml stop\nreCodeBlockStart = /^\\{\\{\\{$/,\n    // {{{ TW text div block start\nreCodeBlockStop = /^\\}\\}\\}$/,\n    // }}} TW text stop\nreUntilCodeStop = /.*?\\}\\}\\}/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  var sol = stream.sol(),\n      ch = stream.peek();\n  state.block = false; // indicates the start of a code block.\n  // check start of  blocks\n\n  if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n    if (stream.match(reCodeBlockStart)) {\n      state.block = true;\n      return chain(stream, state, twTokenCode);\n    }\n\n    if (stream.match(reBlockQuote)) return 'quote';\n    if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop)) return 'comment';\n    if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop)) return 'comment';\n    if (stream.match(reHR)) return 'contentSeparator';\n  }\n\n  stream.next();\n\n  if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n    if (ch == \"!\") {\n      // tw header\n      stream.skipToEnd();\n      return \"header\";\n    }\n\n    if (ch == \"*\") {\n      // tw list\n      stream.eatWhile('*');\n      return \"comment\";\n    }\n\n    if (ch == \"#\") {\n      // tw numbered list\n      stream.eatWhile('#');\n      return \"comment\";\n    }\n\n    if (ch == \";\") {\n      // definition list, term\n      stream.eatWhile(';');\n      return \"comment\";\n    }\n\n    if (ch == \":\") {\n      // definition list, description\n      stream.eatWhile(':');\n      return \"comment\";\n    }\n\n    if (ch == \">\") {\n      // single line quote\n      stream.eatWhile(\">\");\n      return \"quote\";\n    }\n\n    if (ch == '|') return 'header';\n  }\n\n  if (ch == '{' && stream.match('{{')) return chain(stream, state, twTokenCode); // rudimentary html:// file:// link matching. TW knows much more ...\n\n  if (/[hf]/i.test(ch) && /[ti]/i.test(stream.peek()) && stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i)) return \"link\"; // just a little string indicator, don't want to have the whole string covered\n\n  if (ch == '\"') return 'string';\n  if (ch == '~') // _no_ CamelCase indicator should be bold\n    return 'brace';\n  if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\n    return 'brace';\n\n  if (ch == \"@\") {\n    // check for space link. TODO fix @@...@@ highlighting\n    stream.eatWhile(isSpaceName);\n    return \"link\";\n  }\n\n  if (/\\d/.test(ch)) {\n    // numbers\n    stream.eatWhile(/\\d/);\n    return \"number\";\n  }\n\n  if (ch == \"/\") {\n    // tw invisible comment\n    if (stream.eat(\"%\")) {\n      return chain(stream, state, twTokenComment);\n    } else if (stream.eat(\"/\")) {\n      //\n      return chain(stream, state, twTokenEm);\n    }\n  }\n\n  if (ch == \"_\" && stream.eat(\"_\")) // tw underline\n    return chain(stream, state, twTokenUnderline); // strikethrough and mdash handling\n\n  if (ch == \"-\" && stream.eat(\"-\")) {\n    // if strikethrough looks ugly, change CSS.\n    if (stream.peek() != ' ') return chain(stream, state, twTokenStrike); // mdash\n\n    if (stream.peek() == ' ') return 'brace';\n  }\n\n  if (ch == \"'\" && stream.eat(\"'\")) // tw bold\n    return chain(stream, state, twTokenStrong);\n  if (ch == \"<\" && stream.eat(\"<\")) // tw macro\n    return chain(stream, state, twTokenMacro); // core macro handling\n\n  stream.eatWhile(/[\\w\\$_]/);\n  return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n} // tw invisible comment\n\n\nfunction twTokenComment(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    maybeEnd = ch == \"%\";\n  }\n\n  return \"comment\";\n} // tw strong / bold\n\n\nfunction twTokenStrong(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"'\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    maybeEnd = ch == \"'\";\n  }\n\n  return \"strong\";\n} // tw code\n\n\nfunction twTokenCode(stream, state) {\n  var sb = state.block;\n\n  if (sb && stream.current()) {\n    return \"comment\";\n  }\n\n  if (!sb && stream.match(reUntilCodeStop)) {\n    state.tokenize = tokenBase;\n    return \"comment\";\n  }\n\n  if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n    state.tokenize = tokenBase;\n    return \"comment\";\n  }\n\n  stream.next();\n  return \"comment\";\n} // tw em / italic\n\n\nfunction twTokenEm(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    maybeEnd = ch == \"/\";\n  }\n\n  return \"emphasis\";\n} // tw underlined text\n\n\nfunction twTokenUnderline(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"_\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    maybeEnd = ch == \"_\";\n  }\n\n  return \"link\";\n} // tw strike through text looks ugly\n// change CSS if needed\n\n\nfunction twTokenStrike(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"-\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    maybeEnd = ch == \"-\";\n  }\n\n  return \"deleted\";\n} // macro\n\n\nfunction twTokenMacro(stream, state) {\n  if (stream.current() == '<<') {\n    return 'meta';\n  }\n\n  var ch = stream.next();\n\n  if (!ch) {\n    state.tokenize = tokenBase;\n    return null;\n  }\n\n  if (ch == \">\") {\n    if (stream.peek() == '>') {\n      stream.next();\n      state.tokenize = tokenBase;\n      return \"meta\";\n    }\n  }\n\n  stream.eatWhile(/[\\w\\$_]/);\n  return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n} // Interface\n\n\nexport var tiddlyWiki = {\n  startState: function startState() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  }\n};"],"sourceRoot":""}