{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/vhdl.js"],"names":["words","str","obj","split","i","length","allCaps","toUpperCase","firstCap","charAt","slice","metaHook","stream","eatWhile","curPunc","atoms","hooks","keywords","blockKeywords","isOperatorChar","tokenBase","state","quote","ch","next","result","tokenize","escaped","end","tokenString","test","eat","skipToEnd","cur","current","propertyIsEnumerable","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","vhdl","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","firstChar","closing","unit","languageData","indentOnInput","commentTokens","line"],"mappings":"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","file":"static/js/101.708425b4.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n      words = str.split(\",\");\n\n  for (var i = 0; i < words.length; ++i) {\n    var allCaps = words[i].toUpperCase();\n    var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n    obj[words[i]] = true;\n    obj[allCaps] = true;\n    obj[firstCap] = true;\n  }\n\n  return obj;\n}\n\nfunction metaHook(stream) {\n  stream.eatWhile(/[\\w\\$_]/);\n  return \"meta\";\n}\n\nvar atoms = words(\"null\"),\n    hooks = {\n  \"`\": metaHook,\n  \"$\": metaHook\n},\n    multiLineStrings = false;\nvar keywords = words(\"abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,\" + \"body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,\" + \"end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,\" + \"function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,\" + \"literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,\" + \"postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,\" + \"sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor\");\nvar blockKeywords = words(\"architecture,entity,begin,case,port,else,elsif,end,for,function,if\");\nvar isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (hooks[ch]) {\n    var result = hooks[ch](stream, state);\n    if (result !== false) return result;\n  }\n\n  if (ch == '\"') {\n    state.tokenize = tokenString2(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n\n  if (/[\\d']/.test(ch)) {\n    stream.eatWhile(/[\\w\\.']/);\n    return \"number\";\n  }\n\n  if (ch == \"-\") {\n    if (stream.eat(\"-\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n\n  if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"keyword\";\n  }\n\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"--\";\n    }\n\n    if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenString2(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"--\";\n    }\n\n    if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n    return \"string.special\";\n  };\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n} // Interface\n\n\nexport var vhdl = {\n  startState: function startState(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    if (ctx.align == null) ctx.align = true;\n    if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") {\n        ctx = popContext(state);\n      }\n\n      if (ctx.type == \"}\") ctx = popContext(state);\n\n      while (ctx.type == \"statement\") {\n        ctx = popContext(state);\n      }\n    } else if (curPunc == ctx.type) popContext(state);else if (ctx.type == \"}\" || ctx.type == \"top\" || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n    var firstChar = textAfter && textAfter.charAt(0),\n        ctx = state.context,\n        closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : cx.unit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"--\"\n    }\n  }\n};"],"sourceRoot":""}