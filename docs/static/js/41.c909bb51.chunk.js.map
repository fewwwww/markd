{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/eiffel.js"],"names":["wordObj","words","o","i","e","length","keywords","operators","tokenBase","stream","state","eatSpace","quote","style","unescaped","ch","next","newtok","tokenize","push","chain","escaped","pop","eat","skipToEnd","test","eatWhile","eiffel","startState","token","word","current","propertyIsEnumerable","languageData","commentTokens","line"],"mappings":"qGAAA,SAASA,EAAQC,GAGf,IAFA,IAAIC,EAAI,GAECC,EAAI,EAAGC,EAAIH,EAAMI,OAAQF,EAAIC,IAAKD,EACzCD,EAAED,EAAME,KAAM,EAGhB,OAAOD,EAPT,8CAUA,IAAII,EAAWN,EAAQ,CAAC,OAAQ,SAAU,OAAQ,UAAW,QAAS,SAAU,WAAY,OAAQ,QAAS,SAAU,QAAS,SAAU,UAAW,SAAU,YAAa,WAAY,SAAU,OAAQ,MAAO,WAAY,OAAQ,QAAS,OAAQ,KAAM,UAAW,QAAS,UAAW,KAAM,SAAU,OAAQ,WAAY,SAAU,SAAU,MAAO,SAAU,OAAQ,KAAM,WAAY,SAAU,QAAS,QAAS,QAAS,WAAY,YAAa,UAAW,WAAY,UAAW,WAAY,WAAY,QAAS,OAAQ,OAAQ,SAAU,YAAa,QAAS,UAAW,SAAU,WAAY,aAAc,KAAM,MAAO,UAAW,MAAO,OACznBO,EAAYP,EAAQ,CAAC,KAAM,WAAY,MAAO,KAAM,KAAM,OAO9D,SAASQ,EAAUC,EAAQC,GACzB,GAAID,EAAOE,WAAY,OAAO,KAC9B,IAyBkBC,EAAOC,EAAOC,EAzB5BC,EAAKN,EAAOO,OAEhB,MAAU,KAAND,GAAmB,KAANA,EATnB,SAAeE,EAAQR,EAAQC,GAE7B,OADAA,EAAMQ,SAASC,KAAKF,GACbA,EAAOR,EAAQC,GAQbU,EAsBSR,EAtBQG,EAsBDF,EAtBK,SAuBvB,SAAUJ,EAAQC,GAIvB,IAHA,IACIK,EADAM,GAAU,EAGiB,OAAvBN,EAAKN,EAAOO,SAAiB,CACnC,GAAID,GAAMH,IAAUE,IAAcO,GAAU,CAC1CX,EAAMQ,SAASI,MACf,MAGFD,GAAWA,GAAiB,KAANN,EAGxB,OAAOF,IApCgCJ,EAAQC,GAChC,KAANK,GAAaN,EAAOc,IAAI,MACjCd,EAAOe,YACA,WACQ,KAANT,GAAaN,EAAOc,IAAI,KAC1B,WACE,QAAQE,KAAKV,IACtBN,EAAOiB,SAAS,iBAChBjB,EAAOc,IAAI,UACJ,YACE,eAAeE,KAAKV,IAC7BN,EAAOiB,SAAS,gBAChBjB,EAAOc,IAAI,UACJ,YACE,iBAAiBE,KAAKV,IAC/BN,EAAOiB,SAAS,kBACT,YAEA,KAsBJ,IAAIC,EAAS,CAClBC,WAAY,WACV,MAAO,CACLV,SAAU,CAACV,KAGfqB,MAAO,SAAepB,EAAQC,GAC5B,IAAIG,EAAQH,EAAMQ,SAASR,EAAMQ,SAASb,OAAS,GAAGI,EAAQC,GAE9D,GAAa,YAATG,EAAqB,CACvB,IAAIiB,EAAOrB,EAAOsB,UAClBlB,EAAQP,EAAS0B,qBAAqBvB,EAAOsB,WAAa,UAAYxB,EAAUyB,qBAAqBvB,EAAOsB,WAAa,WAAa,qBAAqBN,KAAKK,GAAQ,MAAQ,iBAAiBL,KAAKK,GAAQ,SAAW,iBAAiBL,KAAKK,GAAQ,SAAW,uBAAuBL,KAAKK,GAAQ,SAAW,uCAAuCL,KAAKK,GAAQ,SAAW,YAAYL,KAAKK,GAAQ,SAAW,WAGtZ,OAAOjB,GAEToB,aAAc,CACZC,cAAe,CACbC,KAAM","file":"static/js/41.c909bb51.chunk.js","sourcesContent":["function wordObj(words) {\n  var o = {};\n\n  for (var i = 0, e = words.length; i < e; ++i) {\n    o[words[i]] = true;\n  }\n\n  return o;\n}\n\nvar keywords = wordObj(['note', 'across', 'when', 'variant', 'until', 'unique', 'undefine', 'then', 'strip', 'select', 'retry', 'rescue', 'require', 'rename', 'reference', 'redefine', 'prefix', 'once', 'old', 'obsolete', 'loop', 'local', 'like', 'is', 'inspect', 'infix', 'include', 'if', 'frozen', 'from', 'external', 'export', 'ensure', 'end', 'elseif', 'else', 'do', 'creation', 'create', 'check', 'alias', 'agent', 'separate', 'invariant', 'inherit', 'indexing', 'feature', 'expanded', 'deferred', 'class', 'Void', 'True', 'Result', 'Precursor', 'False', 'Current', 'create', 'attached', 'detachable', 'as', 'and', 'implies', 'not', 'or']);\nvar operators = wordObj([\":=\", \"and then\", \"and\", \"or\", \"<<\", \">>\"]);\n\nfunction chain(newtok, stream, state) {\n  state.tokenize.push(newtok);\n  return newtok(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) return null;\n  var ch = stream.next();\n\n  if (ch == '\"' || ch == \"'\") {\n    return chain(readQuoted(ch, \"string\"), stream, state);\n  } else if (ch == \"-\" && stream.eat(\"-\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \":\" && stream.eat(\"=\")) {\n    return \"operator\";\n  } else if (/[0-9]/.test(ch)) {\n    stream.eatWhile(/[xXbBCc0-9\\.]/);\n    stream.eat(/[\\?\\!]/);\n    return \"variable\";\n  } else if (/[a-zA-Z_0-9]/.test(ch)) {\n    stream.eatWhile(/[a-zA-Z_0-9]/);\n    stream.eat(/[\\?\\!]/);\n    return \"variable\";\n  } else if (/[=+\\-\\/*^%<>~]/.test(ch)) {\n    stream.eatWhile(/[=+\\-\\/*^%<>~]/);\n    return \"operator\";\n  } else {\n    return null;\n  }\n}\n\nfunction readQuoted(quote, style, unescaped) {\n  return function (stream, state) {\n    var escaped = false,\n        ch;\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && (unescaped || !escaped)) {\n        state.tokenize.pop();\n        break;\n      }\n\n      escaped = !escaped && ch == \"%\";\n    }\n\n    return style;\n  };\n}\n\nexport var eiffel = {\n  startState: function startState() {\n    return {\n      tokenize: [tokenBase]\n    };\n  },\n  token: function token(stream, state) {\n    var style = state.tokenize[state.tokenize.length - 1](stream, state);\n\n    if (style == \"variable\") {\n      var word = stream.current();\n      style = keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : operators.propertyIsEnumerable(stream.current()) ? \"operator\" : /^[A-Z][A-Z_0-9]*$/g.test(word) ? \"tag\" : /^0[bB][0-1]+$/g.test(word) ? \"number\" : /^0[cC][0-7]+$/g.test(word) ? \"number\" : /^0[xX][a-fA-F0-9]+$/g.test(word) ? \"number\" : /^([0-9]+\\.[0-9]*)|([0-9]*\\.[0-9]+)$/g.test(word) ? \"number\" : /^[0-9]+$/g.test(word) ? \"number\" : \"variable\";\n    }\n\n    return style;\n  },\n  languageData: {\n    commentTokens: {\n      line: \"--\"\n    }\n  }\n};"],"sourceRoot":""}