{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/http.js"],"names":["failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","http","token","eatSpace","blankLine","startState"],"mappings":"qGAAA,SAASA,EAAcC,EAAQC,GAG7B,OAFAD,EAAOE,YACPD,EAAME,IAAMC,EACL,QAGT,SAASC,EAAML,EAAQC,GACrB,OAAID,EAAOM,MAAM,kBACfL,EAAME,IAAMI,EACL,WACEP,EAAOM,MAAM,YAAc,QAAQE,KAAKR,EAAOS,SACxDR,EAAME,IAAMO,EACL,WAEAX,EAAcC,EAAQC,GAIjC,SAASM,EAAmBP,EAAQC,GAClC,IAAIU,EAAOX,EAAOM,MAAM,QACxB,IAAKK,EAAM,OAAOZ,EAAcC,EAAQC,GACxCA,EAAME,IAAMS,EACZ,IAAIC,EAASC,OAAOH,EAAK,IAEzB,OAAIE,GAAU,KAAOA,EAAS,IACrB,OAEA,QAIX,SAASD,EAAmBZ,EAAQC,GAGlC,OAFAD,EAAOE,YACPD,EAAME,IAAMC,EACL,KAGT,SAASM,EAAYV,EAAQC,GAG3B,OAFAD,EAAOe,SAAS,MAChBd,EAAME,IAAMa,EACL,iBAGT,SAASA,EAAgBhB,EAAQC,GAC/B,OAAID,EAAOM,MAAM,mBACfL,EAAME,IAAMC,EACL,WAEAL,EAAcC,EAAQC,GAIjC,SAASG,EAAOJ,GACd,OAAIA,EAAOiB,QAAUjB,EAAOkB,IAAI,SAC1BlB,EAAOM,MAAM,SACR,QAEPN,EAAOE,YACA,UAGTF,EAAOE,YACA,UAIX,SAASiB,EAAKnB,GAEZ,OADAA,EAAOE,YACA,KApET,4CAuEO,IAAIkB,EAAO,CAChBC,MAAO,SAAerB,EAAQC,GAC5B,IAAIE,EAAMF,EAAME,IAChB,OAAIA,GAAOC,GAAUD,GAAOgB,GAAQnB,EAAOsB,WAAmB,KACvDnB,EAAIH,EAAQC,IAErBsB,UAAW,SAAmBtB,GAC5BA,EAAME,IAAMgB,GAEdK,WAAY,WACV,MAAO,CACLrB,IAAKE","file":"static/js/52.bd9c9b5e.chunk.js","sourcesContent":["function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\n\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\n\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\n\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\n\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\n\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\n\nexport var http = {\n  token: function token(stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n  blankLine: function blankLine(state) {\n    state.cur = body;\n  },\n  startState: function startState() {\n    return {\n      cur: start\n    };\n  }\n};"],"sourceRoot":""}