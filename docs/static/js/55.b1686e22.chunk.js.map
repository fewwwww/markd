{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/jinja2.js"],"names":["keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","eat","sol","RegExp","join","jinja2","startState","tokenize","token","languageData","commentTokens","block","open","close"],"mappings":"qGAAA,kDAAIA,EAAW,CAAC,MAAO,KAAM,QAAS,WAAY,KAAM,QAAS,QAAS,OAAQ,OAAQ,UAAW,SAAU,YAAa,UAAW,MAAO,SAAU,KAAM,QAAS,YAAa,eAAgB,UAAW,aAAc,aAAc,gBAAiB,KAAM,UAAW,OAAQ,MAAO,MAAO,KAAM,SAAU,UAAW,WAAY,YAAa,eAAgB,MAAO,cAAe,YAAa,aAAc,eAAgB,gBAAiB,YAAa,aAAc,cAAe,eAAgB,aAAc,MAAO,OAAQ,UAAW,uBAAwB,QAAS,WAAY,OAAQ,aAAc,gBAAiB,0BAA2B,4BAA6B,UACnqBC,EAAW,oBACXC,EAAO,aACPC,EAAO,CAAC,OAAQ,SAChBC,EAAS,6BAIb,SAASC,EAAUC,EAAQC,GACzB,IAAIC,EAAKF,EAAOG,OAEhB,GAAIF,EAAMG,UAQR,OAPKJ,EAAOK,OAAO,OAGjBL,EAAOM,SAAS,QAChBL,EAAMG,WAAY,GAHlBJ,EAAOO,YAMF,UACF,GAAIN,EAAMO,MAAO,CAEtB,GAAIP,EAAMN,SAAU,CAGlB,GAFAM,EAAMN,UAAW,EAEbK,EAAOS,MAAMZ,GACf,MAAO,OAGT,GAAIG,EAAOS,MAAMX,GACf,MAAO,SAKX,GAAIG,EAAML,KAAM,CAGd,GAFAK,EAAML,MAAO,EAETI,EAAOS,MAAMZ,GACf,MAAO,OAGT,GAAIG,EAAOS,MAAMX,GACf,MAAO,SAIX,GAAIG,EAAMS,SAMR,OALIR,GAAMD,EAAMS,WACdT,EAAMS,UAAW,GAGnBV,EAAOW,OACA,SACF,GAAU,KAANT,GAAmB,KAANA,EAGtB,OAFAD,EAAMS,SAAWR,EACjBF,EAAOW,OACA,SACF,GAAIX,EAAOS,MAAMR,EAAMO,MAAQ,MAAQR,EAAOY,IAAI,MAAQZ,EAAOS,MAAMR,EAAMO,MAAQ,KAE1F,OADAP,EAAMO,OAAQ,EACP,MACF,GAAIR,EAAOS,MAAMd,GAEtB,OADAM,EAAMN,UAAW,EACV,WACF,GAAIK,EAAOS,MAAMb,GACtBK,EAAML,MAAO,OAEb,GAAII,EAAOY,IAAI,MAAQZ,EAAOa,MAAO,CACnC,GAAIb,EAAOS,MAAMf,GACf,MAAO,UAGT,GAAIM,EAAOS,MAAMZ,GACf,MAAO,OAGT,GAAIG,EAAOS,MAAMX,GACf,MAAO,SAGLE,EAAOa,OACTb,EAAOW,YAGTX,EAAOW,OAIX,MAAO,WACF,GAAIX,EAAOY,IAAI,KAAM,CAC1B,GAAIZ,EAAOY,IAAI,KAUb,OATAX,EAAMG,WAAY,EAEbJ,EAAOK,OAAO,OAGjBL,EAAOM,SAAS,QAChBL,EAAMG,WAAY,GAHlBJ,EAAOO,YAMF,UACF,GAAIL,EAAKF,EAAOY,IAAI,QASzB,OAPAX,EAAMO,MAAQN,EAEJ,KAANA,IACFD,EAAMO,MAAQ,KAGhBR,EAAOY,IAAI,KACJ,MAIXZ,EAAOW,OA7GTjB,EAAW,IAAIoB,OAAO,KAAOpB,EAASqB,KAAK,OAAS,SACpDlB,EAAO,IAAIiB,OAAO,KAAOjB,EAAKkB,KAAK,OAAS,SAgHrC,IAAIC,EAAS,CAClBC,WAAY,WACV,MAAO,CACLC,SAAUnB,IAGdoB,MAAO,SAAenB,EAAQC,GAC5B,OAAOA,EAAMiB,SAASlB,EAAQC,IAEhCmB,aAAc,CACZC,cAAe,CACbC,MAAO,CACLC,KAAM,KACNC,MAAO","file":"static/js/55.b1686e22.chunk.js","sourcesContent":["var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\", \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\", \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\", \"ifequal\", \"endifequal\", \"ifnotequal\", \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\", \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\", \"closeblock\", \"openvariable\", \"closevariable\", \"openbrace\", \"closebrace\", \"opencomment\", \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\", \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\", \"endblocktrans\", \"get_available_languages\", \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\nkeywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\natom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\nfunction tokenBase(stream, state) {\n  var ch = stream.peek(); //Comment\n\n  if (state.incomment) {\n    if (!stream.skipTo(\"#}\")) {\n      stream.skipToEnd();\n    } else {\n      stream.eatWhile(/\\#|}/);\n      state.incomment = false;\n    }\n\n    return \"comment\"; //Tag\n  } else if (state.intag) {\n    //After operator\n    if (state.operator) {\n      state.operator = false;\n\n      if (stream.match(atom)) {\n        return \"atom\";\n      }\n\n      if (stream.match(number)) {\n        return \"number\";\n      }\n    } //After sign\n\n\n    if (state.sign) {\n      state.sign = false;\n\n      if (stream.match(atom)) {\n        return \"atom\";\n      }\n\n      if (stream.match(number)) {\n        return \"number\";\n      }\n    }\n\n    if (state.instring) {\n      if (ch == state.instring) {\n        state.instring = false;\n      }\n\n      stream.next();\n      return \"string\";\n    } else if (ch == \"'\" || ch == '\"') {\n      state.instring = ch;\n      stream.next();\n      return \"string\";\n    } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n      state.intag = false;\n      return \"tag\";\n    } else if (stream.match(operator)) {\n      state.operator = true;\n      return \"operator\";\n    } else if (stream.match(sign)) {\n      state.sign = true;\n    } else {\n      if (stream.eat(\" \") || stream.sol()) {\n        if (stream.match(keywords)) {\n          return \"keyword\";\n        }\n\n        if (stream.match(atom)) {\n          return \"atom\";\n        }\n\n        if (stream.match(number)) {\n          return \"number\";\n        }\n\n        if (stream.sol()) {\n          stream.next();\n        }\n      } else {\n        stream.next();\n      }\n    }\n\n    return \"variable\";\n  } else if (stream.eat(\"{\")) {\n    if (stream.eat(\"#\")) {\n      state.incomment = true;\n\n      if (!stream.skipTo(\"#}\")) {\n        stream.skipToEnd();\n      } else {\n        stream.eatWhile(/\\#|}/);\n        state.incomment = false;\n      }\n\n      return \"comment\"; //Open tag\n    } else if (ch = stream.eat(/\\{|%/)) {\n      //Cache close tag\n      state.intag = ch;\n\n      if (ch == \"{\") {\n        state.intag = \"}\";\n      }\n\n      stream.eat(\"-\");\n      return \"tag\";\n    }\n  }\n\n  stream.next();\n}\n\n;\nexport var jinja2 = {\n  startState: function startState() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n  token: function token(stream, state) {\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"{#\",\n        close: \"#}\"\n      }\n    }\n  }\n};"],"sourceRoot":""}