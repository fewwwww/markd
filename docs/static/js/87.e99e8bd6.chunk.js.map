{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/stylus.js"],"names":["tagKeywords_","documentTypes_","mediaTypes_","mediaFeatures_","propertyKeywords_","nonStandardPropertyKeywords_","fontProperties_","colorKeywords_","valueKeywords_","wordOperatorKeywords_","blockKeywords_","commonAtoms_","hintWords","concat","wordRegexp","words","sort","a","b","RegExp","join","keySet","array","keys","i","length","ch","style","type","override","tagKeywords","tagVariablesRegexp","propertyKeywords","nonStandardPropertyKeywords","valueKeywords","colorKeywords","documentTypes","documentTypesRegexp","mediaFeatures","mediaTypes","fontProperties","operatorsRegexp","wordOperatorKeywordsRegexp","blockKeywords","vendorPrefixesRegexp","commonAtoms","firstWordMatch","states","tokenBase","stream","state","string","match","context","line","firstWord","replace","indent","indentation","peek","skipToEnd","tokenize","tokenCComment","next","tokenString","eatWhile","current","tokenParenthesized","backUp","wordIsTag","test","maybeEnd","quote","escaped","Context","prev","this","pushContext","indentUnit","popContext","currentIndent","contextIndent","popAndPass","n","pass","word","toLowerCase","wordIsProperty","wordIsBlock","wordIsVendorPrefix","wordAsValue","wordLC","typeIsBlock","endOfLine","typeIsInterpolation","typeIsPseudo","startOfLine","sol","eol","firstWordOfLine","re","result","block","charAt","slice","parens","vendorPrefixes","pseudo","atBlock","hasOwnProperty","atBlock_parens","keyframes","interpolation","extend","variableName","stylus","startState","token","eatSpace","textAfter","iCx","cx","lineFirstWord","lineIndent","pos","prevLineFirstWord","prevLineIndent","unit","languageData","indentOnInput","commentTokens","open","close","autocomplete"],"mappings":"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","file":"static/js/87.e99e8bd6.chunk.js","sourcesContent":["// developer.mozilla.org/en-US/docs/Web/HTML/Element\nvar tagKeywords_ = [\"a\", \"abbr\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"bdi\", \"bdo\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"keygen\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"marquee\", \"menu\", \"menuitem\", \"meta\", \"meter\", \"nav\", \"nobr\", \"noframes\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"small\", \"source\", \"span\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"tr\", \"track\", \"u\", \"ul\", \"var\", \"video\"]; // github.com/codemirror/CodeMirror/blob/master/mode/css/css.js\n// Note, \"url-prefix\" should precede \"url\" in order to match correctly in documentTypesRegexp\n\nvar documentTypes_ = [\"domain\", \"regexp\", \"url-prefix\", \"url\"];\nvar mediaTypes_ = [\"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\", \"tty\", \"tv\", \"embossed\"];\nvar mediaFeatures_ = [\"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\", \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\", \"min-device-height\", \"max-device-height\", \"aspect-ratio\", \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\", \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\", \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\", \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\", \"min-resolution\", \"max-resolution\", \"scan\", \"grid\"];\nvar propertyKeywords_ = [\"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\", \"alignment-baseline\", \"anchor-point\", \"animation\", \"animation-delay\", \"animation-direction\", \"animation-duration\", \"animation-fill-mode\", \"animation-iteration-count\", \"animation-name\", \"animation-play-state\", \"animation-timing-function\", \"appearance\", \"azimuth\", \"backface-visibility\", \"background\", \"background-attachment\", \"background-clip\", \"background-color\", \"background-image\", \"background-origin\", \"background-position\", \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\", \"bleed\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\", \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\", \"border-bottom-left-radius\", \"border-bottom-right-radius\", \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\", \"border-color\", \"border-image\", \"border-image-outset\", \"border-image-repeat\", \"border-image-slice\", \"border-image-source\", \"border-image-width\", \"border-left\", \"border-left-color\", \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\", \"border-right-color\", \"border-right-style\", \"border-right-width\", \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\", \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\", \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\", \"caption-side\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\", \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\", \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\", \"columns\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\", \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\", \"dominant-baseline\", \"drop-initial-after-adjust\", \"drop-initial-after-align\", \"drop-initial-before-adjust\", \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\", \"elevation\", \"empty-cells\", \"fit\", \"fit-position\", \"flex\", \"flex-basis\", \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\", \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-feature-settings\", \"font-family\", \"font-kerning\", \"font-language-override\", \"font-size\", \"font-size-adjust\", \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\", \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\", \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\", \"font-weight\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\", \"grid-auto-position\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\", \"grid-column-start\", \"grid-row\", \"grid-row-end\", \"grid-row-start\", \"grid-template\", \"grid-template-areas\", \"grid-template-columns\", \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\", \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\", \"inline-box-align\", \"justify-content\", \"left\", \"letter-spacing\", \"line-break\", \"line-height\", \"line-stacking\", \"line-stacking-ruby\", \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\", \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\", \"marker-offset\", \"marks\", \"marquee-direction\", \"marquee-loop\", \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"max-height\", \"max-width\", \"min-height\", \"min-width\", \"move-to\", \"nav-down\", \"nav-index\", \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\", \"opacity\", \"order\", \"orphans\", \"outline\", \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\", \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\", \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\", \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\", \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\", \"perspective-origin\", \"pitch\", \"pitch-range\", \"play-during\", \"position\", \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\", \"region-break-before\", \"region-break-inside\", \"region-fragment\", \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\", \"right\", \"rotation\", \"rotation-point\", \"ruby-align\", \"ruby-overhang\", \"ruby-position\", \"ruby-span\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\", \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\", \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\", \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\", \"target-position\", \"text-align\", \"text-align-last\", \"text-decoration\", \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\", \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\", \"text-indent\", \"text-justify\", \"text-outline\", \"text-overflow\", \"text-shadow\", \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\", \"text-wrap\", \"top\", \"transform\", \"transform-origin\", \"transform-style\", \"transition\", \"transition-delay\", \"transition-duration\", \"transition-property\", \"transition-timing-function\", \"unicode-bidi\", \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\", \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\", \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"will-change\", \"word-break\", \"word-spacing\", \"word-wrap\", \"z-index\", \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\", \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\", \"color-interpolation\", \"color-interpolation-filters\", \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\", \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"shape-rendering\", \"stroke\", \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\", \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\", \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\", \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\", \"font-smoothing\", \"osx-font-smoothing\"];\nvar nonStandardPropertyKeywords_ = [\"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\", \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\", \"scrollbar-3d-light-color\", \"scrollbar-track-color\", \"shape-inside\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"zoom\"];\nvar fontProperties_ = [\"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\", \"font-stretch\", \"font-weight\", \"font-style\"];\nvar colorKeywords_ = [\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\"];\nvar valueKeywords_ = [\"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\", \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\", \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\", \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\", \"bengali\", \"blink\", \"block\", \"block-axis\", \"bold\", \"bolder\", \"border\", \"border-box\", \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"bullets\", \"button\", \"button-bevel\", \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\", \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\", \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\", \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\", \"col-resize\", \"collapse\", \"column\", \"compact\", \"condensed\", \"contain\", \"content\", \"contents\", \"content-box\", \"context-menu\", \"continuous\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\", \"cross\", \"crosshair\", \"currentcolor\", \"cursive\", \"cyclic\", \"dashed\", \"decimal\", \"decimal-leading-zero\", \"default\", \"default-button\", \"destination-atop\", \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\", \"dot-dash\", \"dot-dot-dash\", \"dotted\", \"double\", \"down\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\", \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\", \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\", \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\", \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\", \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\", \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\", \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\", \"ethiopic-numeric\", \"ew-resize\", \"expanded\", \"extends\", \"extra-condensed\", \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fixed\", \"flat\", \"flex\", \"footnotes\", \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"graytext\", \"groove\", \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hebrew\", \"help\", \"hidden\", \"hide\", \"higher\", \"highlight\", \"highlighttext\", \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"icon\", \"ignore\", \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\", \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\", \"inline-block\", \"inline-flex\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\", \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\", \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\", \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\", \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\", \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\", \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\", \"lower-roman\", \"lowercase\", \"ltr\", \"malayalam\", \"match\", \"matrix\", \"matrix3d\", \"media-controls-background\", \"media-current-time-display\", \"media-fullscreen-button\", \"media-mute-button\", \"media-play-button\", \"media-return-to-realtime-button\", \"media-rewind-button\", \"media-seek-back-button\", \"media-seek-forward-button\", \"media-slider\", \"media-sliderthumb\", \"media-time-remaining-display\", \"media-volume-slider\", \"media-volume-slider-container\", \"media-volume-sliderthumb\", \"medium\", \"menu\", \"menulist\", \"menulist-button\", \"menulist-text\", \"menulist-textfield\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\", \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"myanmar\", \"n-resize\", \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\", \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\", \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"open-quote\", \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\", \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\", \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"plus-darker\", \"plus-lighter\", \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\", \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\", \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\", \"relative\", \"repeat\", \"repeating-linear-gradient\", \"repeating-radial-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\", \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\", \"rotateZ\", \"round\", \"row-resize\", \"rtl\", \"run-in\", \"running\", \"s-resize\", \"sans-serif\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"scroll\", \"scrollbar\", \"scroll-position\", \"se-resize\", \"searchfield\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"semi-condensed\", \"semi-expanded\", \"separate\", \"serif\", \"show\", \"sidama\", \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\", \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\", \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\", \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"solid\", \"somali\", \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"spell-out\", \"square\", \"square-button\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"sub\", \"subpixel-antialiased\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\", \"tamil\", \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\", \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\", \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\", \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\", \"trad-chinese-formal\", \"trad-chinese-informal\", \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\", \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"up\", \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\", \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\", \"var\", \"vertical\", \"vertical-text\", \"visible\", \"visibleFill\", \"visiblePainted\", \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\", \"window\", \"windowframe\", \"windowtext\", \"words\", \"x-large\", \"x-small\", \"xor\", \"xx-large\", \"xx-small\", \"bicubic\", \"optimizespeed\", \"grayscale\", \"row\", \"row-reverse\", \"wrap\", \"wrap-reverse\", \"column-reverse\", \"flex-start\", \"flex-end\", \"space-between\", \"space-around\", \"unset\"];\nvar wordOperatorKeywords_ = [\"in\", \"and\", \"or\", \"not\", \"is not\", \"is a\", \"is\", \"isnt\", \"defined\", \"if unless\"],\n    blockKeywords_ = [\"for\", \"if\", \"else\", \"unless\", \"from\", \"to\"],\n    commonAtoms_ = [\"null\", \"true\", \"false\", \"href\", \"title\", \"type\", \"not-allowed\", \"readonly\", \"disabled\"],\n    commonDef_ = [\"@font-face\", \"@keyframes\", \"@media\", \"@viewport\", \"@page\", \"@host\", \"@supports\", \"@block\", \"@css\"];\nvar hintWords = tagKeywords_.concat(documentTypes_, mediaTypes_, mediaFeatures_, propertyKeywords_, nonStandardPropertyKeywords_, colorKeywords_, valueKeywords_, fontProperties_, wordOperatorKeywords_, blockKeywords_, commonAtoms_, commonDef_);\n\nfunction wordRegexp(words) {\n  words = words.sort(function (a, b) {\n    return b > a;\n  });\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nfunction keySet(array) {\n  var keys = {};\n\n  for (var i = 0; i < array.length; ++i) {\n    keys[array[i]] = true;\n  }\n\n  return keys;\n}\n\nfunction escapeRegExp(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\nvar tagKeywords = keySet(tagKeywords_),\n    tagVariablesRegexp = /^(a|b|i|s|col|em)$/i,\n    propertyKeywords = keySet(propertyKeywords_),\n    nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_),\n    valueKeywords = keySet(valueKeywords_),\n    colorKeywords = keySet(colorKeywords_),\n    documentTypes = keySet(documentTypes_),\n    documentTypesRegexp = wordRegexp(documentTypes_),\n    mediaFeatures = keySet(mediaFeatures_),\n    mediaTypes = keySet(mediaTypes_),\n    fontProperties = keySet(fontProperties_),\n    operatorsRegexp = /^\\s*([.]{2,3}|&&|\\|\\||\\*\\*|[?!=:]?=|[-+*\\/%<>]=?|\\?:|\\~)/,\n    wordOperatorKeywordsRegexp = wordRegexp(wordOperatorKeywords_),\n    blockKeywords = keySet(blockKeywords_),\n    vendorPrefixesRegexp = new RegExp(/^\\-(moz|ms|o|webkit)-/i),\n    commonAtoms = keySet(commonAtoms_),\n    firstWordMatch = \"\",\n    states = {},\n    ch,\n    style,\n    type,\n    override;\n/**\n * Tokenizers\n */\n\nfunction tokenBase(stream, state) {\n  firstWordMatch = stream.string.match(/(^[\\w-]+\\s*=\\s*$)|(^\\s*[\\w-]+\\s*=\\s*[\\w-])|(^\\s*(\\.|#|@|\\$|\\&|\\[|\\d|\\+|::?|\\{|\\>|~|\\/)?\\s*[\\w-]*([a-z0-9-]|\\*|\\/\\*)(\\(|,)?)/);\n  state.context.line.firstWord = firstWordMatch ? firstWordMatch[0].replace(/^\\s*/, \"\") : \"\";\n  state.context.line.indent = stream.indentation();\n  ch = stream.peek(); // Line comment\n\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return [\"comment\", \"comment\"];\n  } // Block comment\n\n\n  if (stream.match(\"/*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  } // String\n\n\n  if (ch == \"\\\"\" || ch == \"'\") {\n    stream.next();\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  } // Def\n\n\n  if (ch == \"@\") {\n    stream.next();\n    stream.eatWhile(/[\\w\\\\-]/);\n    return [\"def\", stream.current()];\n  } // ID selector or Hex color\n\n\n  if (ch == \"#\") {\n    stream.next(); // Hex color\n\n    if (stream.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\\b(?!-)/i)) {\n      return [\"atom\", \"atom\"];\n    } // ID selector\n\n\n    if (stream.match(/^[a-z][\\w-]*/i)) {\n      return [\"builtin\", \"hash\"];\n    }\n  } // Vendor prefixes\n\n\n  if (stream.match(vendorPrefixesRegexp)) {\n    return [\"meta\", \"vendor-prefixes\"];\n  } // Numbers\n\n\n  if (stream.match(/^-?[0-9]?\\.?[0-9]/)) {\n    stream.eatWhile(/[a-z%]/i);\n    return [\"number\", \"unit\"];\n  } // !important|optional\n\n\n  if (ch == \"!\") {\n    stream.next();\n    return [stream.match(/^(important|optional)/i) ? \"keyword\" : \"operator\", \"important\"];\n  } // Class\n\n\n  if (ch == \".\" && stream.match(/^\\.[a-z][\\w-]*/i)) {\n    return [\"qualifier\", \"qualifier\"];\n  } // url url-prefix domain regexp\n\n\n  if (stream.match(documentTypesRegexp)) {\n    if (stream.peek() == \"(\") state.tokenize = tokenParenthesized;\n    return [\"property\", \"word\"];\n  } // Mixins / Functions\n\n\n  if (stream.match(/^[a-z][\\w-]*\\(/i)) {\n    stream.backUp(1);\n    return [\"keyword\", \"mixin\"];\n  } // Block mixins\n\n\n  if (stream.match(/^(\\+|-)[a-z][\\w-]*\\(/i)) {\n    stream.backUp(1);\n    return [\"keyword\", \"block-mixin\"];\n  } // Parent Reference BEM naming\n\n\n  if (stream.string.match(/^\\s*&/) && stream.match(/^[-_]+[a-z][\\w-]*/)) {\n    return [\"qualifier\", \"qualifier\"];\n  } // / Root Reference & Parent Reference\n\n\n  if (stream.match(/^(\\/|&)(-|_|:|\\.|#|[a-z])/)) {\n    stream.backUp(1);\n    return [\"variableName.special\", \"reference\"];\n  }\n\n  if (stream.match(/^&{1}\\s*$/)) {\n    return [\"variableName.special\", \"reference\"];\n  } // Word operator\n\n\n  if (stream.match(wordOperatorKeywordsRegexp)) {\n    return [\"operator\", \"operator\"];\n  } // Word\n\n\n  if (stream.match(/^\\$?[-_]*[a-z0-9]+[\\w-]*/i)) {\n    // Variable\n    if (stream.match(/^(\\.|\\[)[\\w-\\'\\\"\\]]+/i, false)) {\n      if (!wordIsTag(stream.current())) {\n        stream.match('.');\n        return [\"variable\", \"variable-name\"];\n      }\n    }\n\n    return [\"variable\", \"word\"];\n  } // Operators\n\n\n  if (stream.match(operatorsRegexp)) {\n    return [\"operator\", stream.current()];\n  } // Delimiters\n\n\n  if (/[:;,{}\\[\\]\\(\\)]/.test(ch)) {\n    stream.next();\n    return [null, ch];\n  } // Non-detected items\n\n\n  stream.next();\n  return [null, null];\n}\n/**\n * Token comment\n */\n\n\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = null;\n      break;\n    }\n\n    maybeEnd = ch == \"*\";\n  }\n\n  return [\"comment\", \"comment\"];\n}\n/**\n * Token string\n */\n\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        ch;\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        if (quote == \")\") stream.backUp(1);\n        break;\n      }\n\n      escaped = !escaped && ch == \"\\\\\";\n    }\n\n    if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\n    return [\"string\", \"string\"];\n  };\n}\n/**\n * Token parenthesized\n */\n\n\nfunction tokenParenthesized(stream, state) {\n  stream.next(); // Must be \"(\"\n\n  if (!stream.match(/\\s*[\\\"\\')]/, false)) state.tokenize = tokenString(\")\");else state.tokenize = null;\n  return [null, \"(\"];\n}\n/**\n * Context management\n */\n\n\nfunction Context(type, indent, prev, line) {\n  this.type = type;\n  this.indent = indent;\n  this.prev = prev;\n  this.line = line || {\n    firstWord: \"\",\n    indent: 0\n  };\n}\n\nfunction pushContext(state, stream, type, indent) {\n  indent = indent >= 0 ? indent : stream.indentUnit;\n  state.context = new Context(type, stream.indentation() + indent, state.context);\n  return type;\n}\n\nfunction popContext(state, stream, currentIndent) {\n  var contextIndent = state.context.indent - stream.indentUnit;\n  currentIndent = currentIndent || false;\n  state.context = state.context.prev;\n  if (currentIndent) state.context.indent = contextIndent;\n  return state.context.type;\n}\n\nfunction pass(type, stream, state) {\n  return states[state.context.type](type, stream, state);\n}\n\nfunction popAndPass(type, stream, state, n) {\n  for (var i = n || 1; i > 0; i--) {\n    state.context = state.context.prev;\n  }\n\n  return pass(type, stream, state);\n}\n/**\n * Parser\n */\n\n\nfunction wordIsTag(word) {\n  return word.toLowerCase() in tagKeywords;\n}\n\nfunction wordIsProperty(word) {\n  word = word.toLowerCase();\n  return word in propertyKeywords || word in fontProperties;\n}\n\nfunction wordIsBlock(word) {\n  return word.toLowerCase() in blockKeywords;\n}\n\nfunction wordIsVendorPrefix(word) {\n  return word.toLowerCase().match(vendorPrefixesRegexp);\n}\n\nfunction wordAsValue(word) {\n  var wordLC = word.toLowerCase();\n  var override = \"variable\";\n  if (wordIsTag(word)) override = \"tag\";else if (wordIsBlock(word)) override = \"block-keyword\";else if (wordIsProperty(word)) override = \"property\";else if (wordLC in valueKeywords || wordLC in commonAtoms) override = \"atom\";else if (wordLC == \"return\" || wordLC in colorKeywords) override = \"keyword\"; // Font family\n  else if (word.match(/^[A-Z]/)) override = \"string\";\n  return override;\n}\n\nfunction typeIsBlock(type, stream) {\n  return endOfLine(stream) && (type == \"{\" || type == \"]\" || type == \"hash\" || type == \"qualifier\") || type == \"block-mixin\";\n}\n\nfunction typeIsInterpolation(type, stream) {\n  return type == \"{\" && stream.match(/^\\s*\\$?[\\w-]+/i, false);\n}\n\nfunction typeIsPseudo(type, stream) {\n  return type == \":\" && stream.match(/^[a-z-]+/, false);\n}\n\nfunction startOfLine(stream) {\n  return stream.sol() || stream.string.match(new RegExp(\"^\\\\s*\" + escapeRegExp(stream.current())));\n}\n\nfunction endOfLine(stream) {\n  return stream.eol() || stream.match(/^\\s*$/, false);\n}\n\nfunction firstWordOfLine(line) {\n  var re = /^\\s*[-_]*[a-z0-9]+[\\w-]*/i;\n  var result = typeof line == \"string\" ? line.match(re) : line.string.match(re);\n  return result ? result[0].replace(/^\\s*/, \"\") : \"\";\n}\n/**\n * Block\n */\n\n\nstates.block = function (type, stream, state) {\n  if (type == \"comment\" && startOfLine(stream) || type == \",\" && endOfLine(stream) || type == \"mixin\") {\n    return pushContext(state, stream, \"block\", 0);\n  }\n\n  if (typeIsInterpolation(type, stream)) {\n    return pushContext(state, stream, \"interpolation\");\n  }\n\n  if (endOfLine(stream) && type == \"]\") {\n    if (!/^\\s*(\\.|#|:|\\[|\\*|&)/.test(stream.string) && !wordIsTag(firstWordOfLine(stream))) {\n      return pushContext(state, stream, \"block\", 0);\n    }\n  }\n\n  if (typeIsBlock(type, stream)) {\n    return pushContext(state, stream, \"block\");\n  }\n\n  if (type == \"}\" && endOfLine(stream)) {\n    return pushContext(state, stream, \"block\", 0);\n  }\n\n  if (type == \"variable-name\") {\n    if (stream.string.match(/^\\s?\\$[\\w-\\.\\[\\]\\'\\\"]+$/) || wordIsBlock(firstWordOfLine(stream))) {\n      return pushContext(state, stream, \"variableName\");\n    } else {\n      return pushContext(state, stream, \"variableName\", 0);\n    }\n  }\n\n  if (type == \"=\") {\n    if (!endOfLine(stream) && !wordIsBlock(firstWordOfLine(stream))) {\n      return pushContext(state, stream, \"block\", 0);\n    }\n\n    return pushContext(state, stream, \"block\");\n  }\n\n  if (type == \"*\") {\n    if (endOfLine(stream) || stream.match(/\\s*(,|\\.|#|\\[|:|{)/, false)) {\n      override = \"tag\";\n      return pushContext(state, stream, \"block\");\n    }\n  }\n\n  if (typeIsPseudo(type, stream)) {\n    return pushContext(state, stream, \"pseudo\");\n  }\n\n  if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {\n    return pushContext(state, stream, endOfLine(stream) ? \"block\" : \"atBlock\");\n  }\n\n  if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {\n    return pushContext(state, stream, \"keyframes\");\n  }\n\n  if (/@extends?/.test(type)) {\n    return pushContext(state, stream, \"extend\", 0);\n  }\n\n  if (type && type.charAt(0) == \"@\") {\n    // Property Lookup\n    if (stream.indentation() > 0 && wordIsProperty(stream.current().slice(1))) {\n      override = \"variable\";\n      return \"block\";\n    }\n\n    if (/(@import|@require|@charset)/.test(type)) {\n      return pushContext(state, stream, \"block\", 0);\n    }\n\n    return pushContext(state, stream, \"block\");\n  }\n\n  if (type == \"reference\" && endOfLine(stream)) {\n    return pushContext(state, stream, \"block\");\n  }\n\n  if (type == \"(\") {\n    return pushContext(state, stream, \"parens\");\n  }\n\n  if (type == \"vendor-prefixes\") {\n    return pushContext(state, stream, \"vendorPrefixes\");\n  }\n\n  if (type == \"word\") {\n    var word = stream.current();\n    override = wordAsValue(word);\n\n    if (override == \"property\") {\n      if (startOfLine(stream)) {\n        return pushContext(state, stream, \"block\", 0);\n      } else {\n        override = \"atom\";\n        return \"block\";\n      }\n    }\n\n    if (override == \"tag\") {\n      // tag is a css value\n      if (/embed|menu|pre|progress|sub|table/.test(word)) {\n        if (wordIsProperty(firstWordOfLine(stream))) {\n          override = \"atom\";\n          return \"block\";\n        }\n      } // tag is an attribute\n\n\n      if (stream.string.match(new RegExp(\"\\\\[\\\\s*\" + word + \"|\" + word + \"\\\\s*\\\\]\"))) {\n        override = \"atom\";\n        return \"block\";\n      } // tag is a variable\n\n\n      if (tagVariablesRegexp.test(word)) {\n        if (startOfLine(stream) && stream.string.match(/=/) || !startOfLine(stream) && !stream.string.match(/^(\\s*\\.|#|\\&|\\[|\\/|>|\\*)/) && !wordIsTag(firstWordOfLine(stream))) {\n          override = \"variable\";\n          if (wordIsBlock(firstWordOfLine(stream))) return \"block\";\n          return pushContext(state, stream, \"block\", 0);\n        }\n      }\n\n      if (endOfLine(stream)) return pushContext(state, stream, \"block\");\n    }\n\n    if (override == \"block-keyword\") {\n      override = \"keyword\"; // Postfix conditionals\n\n      if (stream.current(/(if|unless)/) && !startOfLine(stream)) {\n        return \"block\";\n      }\n\n      return pushContext(state, stream, \"block\");\n    }\n\n    if (word == \"return\") return pushContext(state, stream, \"block\", 0); // Placeholder selector\n\n    if (override == \"variable\" && stream.string.match(/^\\s?\\$[\\w-\\.\\[\\]\\'\\\"]+$/)) {\n      return pushContext(state, stream, \"block\");\n    }\n  }\n\n  return state.context.type;\n};\n/**\n * Parens\n */\n\n\nstates.parens = function (type, stream, state) {\n  if (type == \"(\") return pushContext(state, stream, \"parens\");\n\n  if (type == \")\") {\n    if (state.context.prev.type == \"parens\") {\n      return popContext(state, stream);\n    }\n\n    if (stream.string.match(/^[a-z][\\w-]*\\(/i) && endOfLine(stream) || wordIsBlock(firstWordOfLine(stream)) || /(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/.test(firstWordOfLine(stream)) || !stream.string.match(/^-?[a-z][\\w-\\.\\[\\]\\'\\\"]*\\s*=/) && wordIsTag(firstWordOfLine(stream))) {\n      return pushContext(state, stream, \"block\");\n    }\n\n    if (stream.string.match(/^[\\$-]?[a-z][\\w-\\.\\[\\]\\'\\\"]*\\s*=/) || stream.string.match(/^\\s*(\\(|\\)|[0-9])/) || stream.string.match(/^\\s+[a-z][\\w-]*\\(/i) || stream.string.match(/^\\s+[\\$-]?[a-z]/i)) {\n      return pushContext(state, stream, \"block\", 0);\n    }\n\n    if (endOfLine(stream)) return pushContext(state, stream, \"block\");else return pushContext(state, stream, \"block\", 0);\n  }\n\n  if (type && type.charAt(0) == \"@\" && wordIsProperty(stream.current().slice(1))) {\n    override = \"variable\";\n  }\n\n  if (type == \"word\") {\n    var word = stream.current();\n    override = wordAsValue(word);\n\n    if (override == \"tag\" && tagVariablesRegexp.test(word)) {\n      override = \"variable\";\n    }\n\n    if (override == \"property\" || word == \"to\") override = \"atom\";\n  }\n\n  if (type == \"variable-name\") {\n    return pushContext(state, stream, \"variableName\");\n  }\n\n  if (typeIsPseudo(type, stream)) {\n    return pushContext(state, stream, \"pseudo\");\n  }\n\n  return state.context.type;\n};\n/**\n * Vendor prefixes\n */\n\n\nstates.vendorPrefixes = function (type, stream, state) {\n  if (type == \"word\") {\n    override = \"property\";\n    return pushContext(state, stream, \"block\", 0);\n  }\n\n  return popContext(state, stream);\n};\n/**\n * Pseudo\n */\n\n\nstates.pseudo = function (type, stream, state) {\n  if (!wordIsProperty(firstWordOfLine(stream.string))) {\n    stream.match(/^[a-z-]+/);\n    override = \"variableName.special\";\n    if (endOfLine(stream)) return pushContext(state, stream, \"block\");\n    return popContext(state, stream);\n  }\n\n  return popAndPass(type, stream, state);\n};\n/**\n * atBlock\n */\n\n\nstates.atBlock = function (type, stream, state) {\n  if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\n\n  if (typeIsBlock(type, stream)) {\n    return pushContext(state, stream, \"block\");\n  }\n\n  if (typeIsInterpolation(type, stream)) {\n    return pushContext(state, stream, \"interpolation\");\n  }\n\n  if (type == \"word\") {\n    var word = stream.current().toLowerCase();\n    if (/^(only|not|and|or)$/.test(word)) override = \"keyword\";else if (documentTypes.hasOwnProperty(word)) override = \"tag\";else if (mediaTypes.hasOwnProperty(word)) override = \"attribute\";else if (mediaFeatures.hasOwnProperty(word)) override = \"property\";else if (nonStandardPropertyKeywords.hasOwnProperty(word)) override = \"string.special\";else override = wordAsValue(stream.current());\n\n    if (override == \"tag\" && endOfLine(stream)) {\n      return pushContext(state, stream, \"block\");\n    }\n  }\n\n  if (type == \"operator\" && /^(not|and|or)$/.test(stream.current())) {\n    override = \"keyword\";\n  }\n\n  return state.context.type;\n};\n\nstates.atBlock_parens = function (type, stream, state) {\n  if (type == \"{\" || type == \"}\") return state.context.type;\n\n  if (type == \")\") {\n    if (endOfLine(stream)) return pushContext(state, stream, \"block\");else return pushContext(state, stream, \"atBlock\");\n  }\n\n  if (type == \"word\") {\n    var word = stream.current().toLowerCase();\n    override = wordAsValue(word);\n    if (/^(max|min)/.test(word)) override = \"property\";\n\n    if (override == \"tag\") {\n      tagVariablesRegexp.test(word) ? override = \"variable\" : override = \"atom\";\n    }\n\n    return state.context.type;\n  }\n\n  return states.atBlock(type, stream, state);\n};\n/**\n * Keyframes\n */\n\n\nstates.keyframes = function (type, stream, state) {\n  if (stream.indentation() == \"0\" && (type == \"}\" && startOfLine(stream) || type == \"]\" || type == \"hash\" || type == \"qualifier\" || wordIsTag(stream.current()))) {\n    return popAndPass(type, stream, state);\n  }\n\n  if (type == \"{\") return pushContext(state, stream, \"keyframes\");\n\n  if (type == \"}\") {\n    if (startOfLine(stream)) return popContext(state, stream, true);else return pushContext(state, stream, \"keyframes\");\n  }\n\n  if (type == \"unit\" && /^[0-9]+\\%$/.test(stream.current())) {\n    return pushContext(state, stream, \"keyframes\");\n  }\n\n  if (type == \"word\") {\n    override = wordAsValue(stream.current());\n\n    if (override == \"block-keyword\") {\n      override = \"keyword\";\n      return pushContext(state, stream, \"keyframes\");\n    }\n  }\n\n  if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {\n    return pushContext(state, stream, endOfLine(stream) ? \"block\" : \"atBlock\");\n  }\n\n  if (type == \"mixin\") {\n    return pushContext(state, stream, \"block\", 0);\n  }\n\n  return state.context.type;\n};\n/**\n * Interpolation\n */\n\n\nstates.interpolation = function (type, stream, state) {\n  if (type == \"{\") popContext(state, stream) && pushContext(state, stream, \"block\");\n\n  if (type == \"}\") {\n    if (stream.string.match(/^\\s*(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/i) || stream.string.match(/^\\s*[a-z]/i) && wordIsTag(firstWordOfLine(stream))) {\n      return pushContext(state, stream, \"block\");\n    }\n\n    if (!stream.string.match(/^(\\{|\\s*\\&)/) || stream.match(/\\s*[\\w-]/, false)) {\n      return pushContext(state, stream, \"block\", 0);\n    }\n\n    return pushContext(state, stream, \"block\");\n  }\n\n  if (type == \"variable-name\") {\n    return pushContext(state, stream, \"variableName\", 0);\n  }\n\n  if (type == \"word\") {\n    override = wordAsValue(stream.current());\n    if (override == \"tag\") override = \"atom\";\n  }\n\n  return state.context.type;\n};\n/**\n * Extend/s\n */\n\n\nstates.extend = function (type, stream, state) {\n  if (type == \"[\" || type == \"=\") return \"extend\";\n  if (type == \"]\") return popContext(state, stream);\n\n  if (type == \"word\") {\n    override = wordAsValue(stream.current());\n    return \"extend\";\n  }\n\n  return popContext(state, stream);\n};\n/**\n * Variable name\n */\n\n\nstates.variableName = function (type, stream, state) {\n  if (type == \"string\" || type == \"[\" || type == \"]\" || stream.current().match(/^(\\.|\\$)/)) {\n    if (stream.current().match(/^\\.[\\w-]+/i)) override = \"variable\";\n    return \"variableName\";\n  }\n\n  return popAndPass(type, stream, state);\n};\n\nexport var stylus = {\n  startState: function startState() {\n    return {\n      tokenize: null,\n      state: \"block\",\n      context: new Context(\"block\", 0, null)\n    };\n  },\n  token: function token(stream, state) {\n    if (!state.tokenize && stream.eatSpace()) return null;\n    style = (state.tokenize || tokenBase)(stream, state);\n\n    if (style && typeof style == \"object\") {\n      type = style[1];\n      style = style[0];\n    }\n\n    override = style;\n    state.state = states[state.state](type, stream, state);\n    return override;\n  },\n  indent: function indent(state, textAfter, iCx) {\n    var cx = state.context,\n        ch = textAfter && textAfter.charAt(0),\n        indent = cx.indent,\n        lineFirstWord = firstWordOfLine(textAfter),\n        lineIndent = iCx.lineIndent(iCx.pos),\n        prevLineFirstWord = state.context.prev ? state.context.prev.line.firstWord : \"\",\n        prevLineIndent = state.context.prev ? state.context.prev.line.indent : lineIndent;\n\n    if (cx.prev && (ch == \"}\" && (cx.type == \"block\" || cx.type == \"atBlock\" || cx.type == \"keyframes\") || ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") || ch == \"{\" && cx.type == \"at\")) {\n      indent = cx.indent - iCx.unit;\n    } else if (!/(\\})/.test(ch)) {\n      if (/@|\\$|\\d/.test(ch) || /^\\{/.test(textAfter) || /^\\s*\\/(\\/|\\*)/.test(textAfter) || /^\\s*\\/\\*/.test(prevLineFirstWord) || /^\\s*[\\w-\\.\\[\\]\\'\\\"]+\\s*(\\?|:|\\+)?=/i.test(textAfter) || /^(\\+|-)?[a-z][\\w-]*\\(/i.test(textAfter) || /^return/.test(textAfter) || wordIsBlock(lineFirstWord)) {\n        indent = lineIndent;\n      } else if (/(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/.test(ch) || wordIsTag(lineFirstWord)) {\n        if (/\\,\\s*$/.test(prevLineFirstWord)) {\n          indent = prevLineIndent;\n        } else if (!state.sol() && (/(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord))) {\n          indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;\n        } else {\n          indent = lineIndent;\n        }\n      } else if (!/,\\s*$/.test(textAfter) && (wordIsVendorPrefix(lineFirstWord) || wordIsProperty(lineFirstWord))) {\n        if (wordIsBlock(prevLineFirstWord)) {\n          indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;\n        } else if (/^\\{/.test(prevLineFirstWord)) {\n          indent = lineIndent <= prevLineIndent ? lineIndent : prevLineIndent + iCx.unit;\n        } else if (wordIsVendorPrefix(prevLineFirstWord) || wordIsProperty(prevLineFirstWord)) {\n          indent = lineIndent >= prevLineIndent ? prevLineIndent : lineIndent;\n        } else if (/^(\\.|#|:|\\[|\\*|&|@|\\+|\\-|>|~|\\/)/.test(prevLineFirstWord) || /=\\s*$/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord) || /^\\$[\\w-\\.\\[\\]\\'\\\"]/.test(prevLineFirstWord)) {\n          indent = prevLineIndent + iCx.unit;\n        } else {\n          indent = lineIndent;\n        }\n      }\n    }\n\n    return indent;\n  },\n  languageData: {\n    indentOnInput: /^\\s*\\}$/,\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    autocomplete: hintWords\n  }\n};"],"sourceRoot":""}