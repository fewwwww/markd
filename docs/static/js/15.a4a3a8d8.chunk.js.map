{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/factor.js","../node_modules/@codemirror/legacy-modes/mode/simple-mode.js"],"names":["factor","start","regex","token","next","vocabulary","string","string2","string3","stack","languageData","dontIndentStates","commentTokens","line","simpleMode","states","ensureState","states_","meta","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","push","Rule","indent","dedent","startState","pending","copyState","s","slice","tokenFunction","indentFunction","name","Error","this","val","caret","flags","RegExp","ignoreCase","source","String","toRegex","apply","replace","result","asToken","stream","pend","shift","pos","text","curState","rule","matches","sol","match","pop","indentation","indentUnit","j","backUp","join","textAfter","doneIndentState","indexOf","rules","scan","dedentIfLineStart","m","exec"],"mappings":"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","file":"static/js/15.a4a3a8d8.chunk.js","sourcesContent":["import { simpleMode } from \"./simple-mode.js\";\nexport var factor = simpleMode({\n  start: [// comments\n  {\n    regex: /#?!.*/,\n    token: \"comment\"\n  }, // strings \"\"\", multiline --> state\n  {\n    regex: /\"\"\"/,\n    token: \"string\",\n    next: \"string3\"\n  }, {\n    regex: /(STRING:)(\\s)/,\n    token: [\"keyword\", null],\n    next: \"string2\"\n  }, {\n    regex: /\\S*?\"/,\n    token: \"string\",\n    next: \"string\"\n  }, // numbers: dec, hex, unicode, bin, fractional, complex\n  {\n    regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/,\n    token: \"number\"\n  }, //{regex: /[+-]?/} //fractional\n  // definition: defining word, defined word, etc\n  {\n    regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/,\n    token: [\"keyword\", null, \"def\", null, \"bracket\"],\n    next: \"stack\"\n  }, // method definition: defining word, type, defined word, etc\n  {\n    regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/,\n    token: [\"keyword\", null, \"def\", null, \"tag\"]\n  }, // vocabulary using --> state\n  {\n    regex: /USING\\:/,\n    token: \"keyword\",\n    next: \"vocabulary\"\n  }, // vocabulary definition/use\n  {\n    regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/,\n    token: [\"keyword\", null, \"tag\"]\n  }, // definition: a defining word, defined word\n  {\n    regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/,\n    token: [\"keyword\", null, \"def\"]\n  }, // \"keywords\", incl. ; t f . [ ] { } defining words\n  {\n    regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/,\n    token: \"keyword\"\n  }, // <constructors> and the like\n  {\n    regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/,\n    token: \"builtin\"\n  }, {\n    regex: /[\\)><]+\\S+(?=\\s|$)/,\n    token: \"builtin\"\n  }, // operators\n  {\n    regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/,\n    token: \"keyword\"\n  }, // any id (?)\n  {\n    regex: /\\S+/,\n    token: \"variable\"\n  }, {\n    regex: /\\s+|./,\n    token: null\n  }],\n  vocabulary: [{\n    regex: /;/,\n    token: \"keyword\",\n    next: \"start\"\n  }, {\n    regex: /\\S+/,\n    token: \"tag\"\n  }, {\n    regex: /\\s+|./,\n    token: null\n  }],\n  string: [{\n    regex: /(?:[^\\\\]|\\\\.)*?\"/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /.*/,\n    token: \"string\"\n  }],\n  string2: [{\n    regex: /^;/,\n    token: \"keyword\",\n    next: \"start\"\n  }, {\n    regex: /.*/,\n    token: \"string\"\n  }],\n  string3: [{\n    regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /.*/,\n    token: \"string\"\n  }],\n  stack: [{\n    regex: /\\)/,\n    token: \"bracket\",\n    next: \"start\"\n  }, {\n    regex: /--/,\n    token: \"bracket\"\n  }, {\n    regex: /\\S+/,\n    token: \"meta\"\n  }, {\n    regex: /\\s+|./,\n    token: null\n  }],\n  languageData: {\n    dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n    commentTokens: {\n      line: \"!\"\n    }\n  }\n});","export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {},\n      meta = states.languageData || {},\n      hasIndentation = false;\n\n  for (var state in states) {\n    if (state != meta && states.hasOwnProperty(state)) {\n      var list = states_[state] = [],\n          orig = states[state];\n\n      for (var i = 0; i < orig.length; i++) {\n        var data = orig[i];\n        list.push(new Rule(data, states));\n        if (data.indent || data.dedent) hasIndentation = true;\n      }\n    }\n  }\n\n  return {\n    startState: function startState() {\n      return {\n        state: \"start\",\n        pending: null,\n        indent: hasIndentation ? [] : null\n      };\n    },\n    copyState: function copyState(state) {\n      var s = {\n        state: state.state,\n        pending: state.pending,\n        indent: state.indent && state.indent.slice(0)\n      };\n      if (state.stack) s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  };\n}\n;\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val;\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n\n  for (var i = 0; i < val.length; i++) {\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  }\n\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function (stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent) state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent) state.indent.pop();\n        var token = rule.token;\n        if (token && token.apply) token = token(matches);\n\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n\n          for (var j = 2; j < matches.length; j++) {\n            if (matches[j]) state.pending.push({\n              text: matches[j],\n              token: rule.token[j - 1]\n            });\n          }\n\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function (state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1) return null;\n    var pos = state.indent.length - 1,\n        rules = states[state.state];\n\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n\n      break;\n    }\n\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}"],"sourceRoot":""}