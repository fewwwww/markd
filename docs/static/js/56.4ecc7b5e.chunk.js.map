{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/julia.js"],"names":["wordRegexp","words","end","RegExp","join","operators","delimiters","identifiers","chars","keywordsList","builtinsList","openers","closers","keywords","builtins","macro","symbol","stringPrefixes","inArray","state","nestedArrays","currentScope","n","scopes","length","tokenBase","stream","match","tokenize","tokenComment","leavingExpr","sol","eatSpace","ch","peek","skipToEnd","push","nestedGenerators","pop","inGenerator","lastToken","tokenAnnotation","imMatcher","numberLiteral","tokenChar","delimiter","substr","eat","next","eatWhile","tokenStringFactory","current","isDefinition","nestedParameters","nestedComments","isChar","value","parseInt","julia","startState","firstParenPos","token","style","indent","textAfter","cx","delta","test","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets","autocomplete","concat"],"mappings":"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","file":"static/js/56.4ecc7b5e.chunk.js","sourcesContent":["function wordRegexp(words, end) {\n  if (typeof end === \"undefined\") {\n    end = \"\\\\b\";\n  }\n\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\" + end);\n}\n\nvar octChar = \"\\\\\\\\[0-7]{1,3}\";\nvar hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\nvar sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\nvar uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\nvar operators = wordRegexp([\"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"->\", \"\\\\/\\\\/\", \"[\\\\\\\\%*+\\\\-<>!=\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\", \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\", \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\", \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\", \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"], \"\");\nvar delimiters = /^[;,()[\\]{}]/;\nvar identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\nvar chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\nvar openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\", \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\", \"finally\", \"catch\", \"do\"];\nvar closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\nvar keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\", \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\", \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\", \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\", \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\", \"bitstype\"];\nvar builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\nvar openers = wordRegexp(openersList);\nvar closers = wordRegexp(closersList);\nvar keywords = wordRegexp(keywordsList);\nvar builtins = wordRegexp(builtinsList);\nvar macro = /^@[_A-Za-z][\\w]*/;\nvar symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\nfunction inArray(state) {\n  return state.nestedArrays > 0;\n}\n\nfunction inGenerator(state) {\n  return state.nestedGenerators > 0;\n}\n\nfunction currentScope(state, n) {\n  if (typeof n === \"undefined\") {\n    n = 0;\n  }\n\n  if (state.scopes.length <= n) {\n    return null;\n  }\n\n  return state.scopes[state.scopes.length - (n + 1)];\n} // tokenizers\n\n\nfunction tokenBase(stream, state) {\n  // Handle multiline comments\n  if (stream.match('#=', false)) {\n    state.tokenize = tokenComment;\n    return state.tokenize(stream, state);\n  } // Handle scope changes\n\n\n  var leavingExpr = state.leavingExpr;\n\n  if (stream.sol()) {\n    leavingExpr = false;\n  }\n\n  state.leavingExpr = false;\n\n  if (leavingExpr) {\n    if (stream.match(/^'+/)) {\n      return \"operator\";\n    }\n  }\n\n  if (stream.match(/\\.{4,}/)) {\n    return \"error\";\n  } else if (stream.match(/\\.{1,3}/)) {\n    return \"operator\";\n  }\n\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek(); // Handle single line comments\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch === '[') {\n    state.scopes.push('[');\n    state.nestedArrays++;\n  }\n\n  if (ch === '(') {\n    state.scopes.push('(');\n    state.nestedGenerators++;\n  }\n\n  if (inArray(state) && ch === ']') {\n    while (state.scopes.length && currentScope(state) !== \"[\") {\n      state.scopes.pop();\n    }\n\n    state.scopes.pop();\n    state.nestedArrays--;\n    state.leavingExpr = true;\n  }\n\n  if (inGenerator(state) && ch === ')') {\n    while (state.scopes.length && currentScope(state) !== \"(\") {\n      state.scopes.pop();\n    }\n\n    state.scopes.pop();\n    state.nestedGenerators--;\n    state.leavingExpr = true;\n  }\n\n  if (inArray(state)) {\n    if (state.lastToken == \"end\" && stream.match(':')) {\n      return \"operator\";\n    }\n\n    if (stream.match('end')) {\n      return \"number\";\n    }\n  }\n\n  var match;\n\n  if (match = stream.match(openers, false)) {\n    state.scopes.push(match[0]);\n  }\n\n  if (stream.match(closers, false)) {\n    state.scopes.pop();\n  } // Handle type annotations\n\n\n  if (stream.match(/^::(?![:\\$])/)) {\n    state.tokenize = tokenAnnotation;\n    return state.tokenize(stream, state);\n  } // Handle symbols\n\n\n  if (!leavingExpr && stream.match(symbol) || stream.match(/:([<>]:|<<=?|>>>?=?|->|\\/\\/|\\.{2,3}|[\\.\\\\%*+\\-<>!\\/^|&]=?|[~\\?\\$])/)) {\n    return \"builtin\";\n  } // Handle parametric types\n  //if (stream.match(/^{[^}]*}(?=\\()/)) {\n  //  return \"builtin\";\n  //}\n  // Handle operators and Delimiters\n\n\n  if (stream.match(operators)) {\n    return \"operator\";\n  } // Handle Number Literals\n\n\n  if (stream.match(/^\\.?\\d/, false)) {\n    var imMatcher = RegExp(/^im\\b/);\n    var numberLiteral = false;\n\n    if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) {\n      numberLiteral = true;\n    } // Integers\n\n\n    if (stream.match(/^0x[0-9a-f_]+/i)) {\n      numberLiteral = true;\n    } // Hex\n\n\n    if (stream.match(/^0b[01_]+/i)) {\n      numberLiteral = true;\n    } // Binary\n\n\n    if (stream.match(/^0o[0-7_]+/i)) {\n      numberLiteral = true;\n    } // Octal\n    // Floats\n\n\n    if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) {\n      numberLiteral = true;\n    }\n\n    if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) {\n      numberLiteral = true;\n    } // Decimal\n\n\n    if (numberLiteral) {\n      // Integer literals may be \"long\"\n      stream.match(imMatcher);\n      state.leavingExpr = true;\n      return \"number\";\n    }\n  } // Handle Chars\n\n\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenChar;\n    return state.tokenize(stream, state);\n  } // Handle Strings\n\n\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  if (stream.match(macro)) {\n    return \"meta\";\n  }\n\n  if (stream.match(delimiters)) {\n    return null;\n  }\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(builtins)) {\n    return \"builtin\";\n  }\n\n  var isDefinition = state.isDefinition || state.lastToken == \"function\" || state.lastToken == \"macro\" || state.lastToken == \"type\" || state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n  if (stream.match(identifiers)) {\n    if (isDefinition) {\n      if (stream.peek() === '.') {\n        state.isDefinition = true;\n        return \"variable\";\n      }\n\n      state.isDefinition = false;\n      return \"def\";\n    }\n\n    state.leavingExpr = true;\n    return \"variable\";\n  } // Handle non-detected items\n\n\n  stream.next();\n  return \"error\";\n}\n\nfunction tokenAnnotation(stream, state) {\n  stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n\n  if (stream.match('{')) {\n    state.nestedParameters++;\n  } else if (stream.match('}') && state.nestedParameters > 0) {\n    state.nestedParameters--;\n  }\n\n  if (state.nestedParameters > 0) {\n    stream.match(/.*?(?={|})/) || stream.next();\n  } else if (state.nestedParameters == 0) {\n    state.tokenize = tokenBase;\n  }\n\n  return \"builtin\";\n}\n\nfunction tokenComment(stream, state) {\n  if (stream.match('#=')) {\n    state.nestedComments++;\n  }\n\n  if (!stream.match(/.*?(?=(#=|=#))/)) {\n    stream.skipToEnd();\n  }\n\n  if (stream.match('=#')) {\n    state.nestedComments--;\n    if (state.nestedComments == 0) state.tokenize = tokenBase;\n  }\n\n  return \"comment\";\n}\n\nfunction tokenChar(stream, state) {\n  var isChar = false,\n      match;\n\n  if (stream.match(chars)) {\n    isChar = true;\n  } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n    var value = parseInt(match[1], 16);\n\n    if (value <= 55295 || value >= 57344) {\n      // (U+0,U+D7FF), (U+E000,U+FFFF)\n      isChar = true;\n      stream.next();\n    }\n  } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n    var value = parseInt(match[1], 16);\n\n    if (value <= 1114111) {\n      // U+10FFFF\n      isChar = true;\n      stream.next();\n    }\n  }\n\n  if (isChar) {\n    state.leavingExpr = true;\n    state.tokenize = tokenBase;\n    return \"string\";\n  }\n\n  if (!stream.match(/^[^']+(?=')/)) {\n    stream.skipToEnd();\n  }\n\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenBase;\n  }\n\n  return \"error\";\n}\n\nfunction tokenStringFactory(delimiter) {\n  if (delimiter.substr(-3) === '\"\"\"') {\n    delimiter = '\"\"\"';\n  } else if (delimiter.substr(-1) === '\"') {\n    delimiter = '\"';\n  }\n\n  function tokenString(stream, state) {\n    if (stream.eat('\\\\')) {\n      stream.next();\n    } else if (stream.match(delimiter)) {\n      state.tokenize = tokenBase;\n      state.leavingExpr = true;\n      return \"string\";\n    } else {\n      stream.eat(/[`\"]/);\n    }\n\n    stream.eatWhile(/[^\\\\`\"]/);\n    return \"string\";\n  }\n\n  return tokenString;\n}\n\nexport var julia = {\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      scopes: [],\n      lastToken: null,\n      leavingExpr: false,\n      isDefinition: false,\n      nestedArrays: 0,\n      nestedComments: 0,\n      nestedGenerators: 0,\n      nestedParameters: 0,\n      firstParenPos: -1\n    };\n  },\n  token: function token(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    if (current && style) {\n      state.lastToken = current;\n    }\n\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var delta = 0;\n\n    if (textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) || /^finally/.test(textAfter)) {\n      delta = -1;\n    }\n\n    return (state.scopes.length + delta) * cx.unit;\n  },\n  languageData: {\n    indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\n    commentTokens: {\n      line: \"#\",\n      block: {\n        open: \"#=\",\n        close: \"=#\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    },\n    autocomplete: keywordsList.concat(builtinsList)\n  }\n};"],"sourceRoot":""}