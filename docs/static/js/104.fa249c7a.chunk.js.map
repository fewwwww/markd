{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/yacas.js"],"names":["bodiedOps","str","obj","words","split","i","length","pIdentifier","reFloatForm","RegExp","reIdentifier","rePattern","reFunctionLike","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","tokenComment","skipToEnd","backUp","m","match","hasOwnProperty","scopes","push","scope","currentScope","pop","end","escaped","prev","yacas","startState","token","eatSpace","indent","textAfter","cx","delta","unit","languageData","electricInput","commentTokens","line","block","open","close"],"mappings":"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","file":"static/js/104.fa249c7a.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) {\n    obj[words[i]] = true;\n  }\n\n  return obj;\n}\n\nvar bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" + \"FromString Function Integrate InverseTaylor Limit \" + \"LocalSymbols Macro MacroRule MacroRulePattern \" + \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" + \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" + \"ToStdout ToString TraceRule Until While\"); // patterns\n\nvar pFloatForm = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\nvar pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\"; // regular expressions\n\nvar reFloatForm = new RegExp(pFloatForm);\nvar reIdentifier = new RegExp(pIdentifier);\nvar rePattern = new RegExp(pIdentifier + \"?_\" + pIdentifier);\nvar reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\n\nfunction tokenBase(stream, state) {\n  var ch; // get next character\n\n  ch = stream.next(); // string\n\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  } // comment\n\n\n  if (ch === '/') {\n    if (stream.eat('*')) {\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  } // go back one character\n\n\n  stream.backUp(1); // update scope info\n\n  var m = stream.match(/^(\\w+)\\s*\\(/, false);\n  if (m !== null && bodiedOps.hasOwnProperty(m[1])) state.scopes.push('bodied');\n  var scope = currentScope(state);\n  if (scope === 'bodied' && ch === '[') state.scopes.pop();\n  if (ch === '[' || ch === '{' || ch === '(') state.scopes.push(ch);\n  scope = currentScope(state);\n  if (scope === '[' && ch === ']' || scope === '{' && ch === '}' || scope === '(' && ch === ')') state.scopes.pop();\n\n  if (ch === ';') {\n    while (scope === 'bodied') {\n      state.scopes.pop();\n      scope = currentScope(state);\n    }\n  } // look for ordered rules\n\n\n  if (stream.match(/\\d+ *#/, true, false)) {\n    return 'qualifier';\n  } // look for numbers\n\n\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  } // look for placeholders\n\n\n  if (stream.match(rePattern, true, false)) {\n    return 'variableName.special';\n  } // match all braces separately\n\n\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  } // literals looking like function calls\n\n\n  if (stream.match(reFunctionLike, true, false)) {\n    stream.backUp(1);\n    return 'variableName.function';\n  } // all other identifiers\n\n\n  if (stream.match(reIdentifier, true, false)) {\n    return 'variable';\n  } // operators; note that operators like @@ or /; are matched separately for each symbol.\n\n\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) {\n    return 'operator';\n  } // everything else is an error\n\n\n  return 'error';\n}\n\nfunction tokenString(stream, state) {\n  var next,\n      end = false,\n      escaped = false;\n\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n\n    escaped = !escaped && next === '\\\\';\n  }\n\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n\n  return 'string';\n}\n\n;\n\nfunction tokenComment(stream, state) {\n  var prev, next;\n\n  while ((next = stream.next()) != null) {\n    if (prev === '*' && next === '/') {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    prev = next;\n  }\n\n  return 'comment';\n}\n\nfunction currentScope(state) {\n  var scope = null;\n  if (state.scopes.length > 0) scope = state.scopes[state.scopes.length - 1];\n  return scope;\n}\n\nexport var yacas = {\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      scopes: []\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (state.tokenize !== tokenBase && state.tokenize !== null) return null;\n    var delta = 0;\n    if (textAfter === ']' || textAfter === '];' || textAfter === '}' || textAfter === '};' || textAfter === ');') delta = -1;\n    return (state.scopes.length + delta) * cx.unit;\n  },\n  languageData: {\n    electricInput: /[{}\\[\\]()\\;]/,\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    }\n  }\n};"],"sourceRoot":""}