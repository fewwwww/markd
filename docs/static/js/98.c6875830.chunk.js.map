{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/vb.js"],"names":["wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","identifiers","openingKeywords","middleKeywords","endKeywords","operatorKeywords","wordOperators","commonKeywords","commontypes","keywords","types","opening","middle","closing","doubleClosing","doOpening","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","delimiter","singleline","length","eol","eatWhile","tokenStringFactory","current","doInCurrentLine","next","vb","startState","lastToken","nextLineIndent","token","sol","style","delimiter_index","indexOf","tokenLexer","content","textAfter","cx","trueText","replace","unit","languageData","closeBrackets","brackets","commentTokens","line","autocomplete","concat"],"mappings":"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","file":"static/js/98.c6875830.chunk.js","sourcesContent":["var ERRORCLASS = 'error';\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\nvar doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\nvar identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\nvar openingKeywords = ['class', 'module', 'sub', 'enum', 'select', 'while', 'if', 'function', 'get', 'set', 'property', 'try', 'structure', 'synclock', 'using', 'with'];\nvar middleKeywords = ['else', 'elseif', 'case', 'catch', 'finally'];\nvar endKeywords = ['next', 'loop'];\nvar operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\nvar wordOperators = wordRegexp(operatorKeywords);\nvar commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\nvar commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\nvar keywords = wordRegexp(commonKeywords);\nvar types = wordRegexp(commontypes);\nvar stringPrefixes = '\"';\nvar opening = wordRegexp(openingKeywords);\nvar middle = wordRegexp(middleKeywords);\nvar closing = wordRegexp(endKeywords);\nvar doubleClosing = wordRegexp(['end']);\nvar doOpening = wordRegexp(['do']);\nvar indentInfo = null;\n\nfunction indent(_stream, state) {\n  state.currentIndent++;\n}\n\nfunction dedent(_stream, state) {\n  state.currentIndent--;\n} // tokenizers\n\n\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek(); // Handle Comments\n\n  if (ch === \"'\") {\n    stream.skipToEnd();\n    return 'comment';\n  } // Handle Number Literals\n\n\n  if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n    var floatLiteral = false; // Floats\n\n    if (stream.match(/^\\d*\\.\\d+F?/i)) {\n      floatLiteral = true;\n    } else if (stream.match(/^\\d+\\.\\d*F?/)) {\n      floatLiteral = true;\n    } else if (stream.match(/^\\.\\d+F?/)) {\n      floatLiteral = true;\n    }\n\n    if (floatLiteral) {\n      // Float literals may be \"imaginary\"\n      stream.eat(/J/i);\n      return 'number';\n    } // Integers\n\n\n    var intLiteral = false; // Hex\n\n    if (stream.match(/^&H[0-9a-f]+/i)) {\n      intLiteral = true;\n    } // Octal\n    else if (stream.match(/^&O[0-7]+/i)) {\n        intLiteral = true;\n      } // Decimal\n      else if (stream.match(/^[1-9]\\d*F?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n          intLiteral = true;\n        } // Zero by itself with no other piece of number.\n        else if (stream.match(/^0(?![\\dx])/i)) {\n            intLiteral = true;\n          }\n\n    if (intLiteral) {\n      // Integer literals may be \"long\"\n      stream.eat(/L/i);\n      return 'number';\n    }\n  } // Handle Strings\n\n\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  } // Handle operators and Delimiters\n\n\n  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n    return null;\n  }\n\n  if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {\n    return 'operator';\n  }\n\n  if (stream.match(singleDelimiters)) {\n    return null;\n  }\n\n  if (stream.match(doOpening)) {\n    indent(stream, state);\n    state.doInCurrentLine = true;\n    return 'keyword';\n  }\n\n  if (stream.match(opening)) {\n    if (!state.doInCurrentLine) indent(stream, state);else state.doInCurrentLine = false;\n    return 'keyword';\n  }\n\n  if (stream.match(middle)) {\n    return 'keyword';\n  }\n\n  if (stream.match(doubleClosing)) {\n    dedent(stream, state);\n    dedent(stream, state);\n    return 'keyword';\n  }\n\n  if (stream.match(closing)) {\n    dedent(stream, state);\n    return 'keyword';\n  }\n\n  if (stream.match(types)) {\n    return 'keyword';\n  }\n\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n\n  if (stream.match(identifiers)) {\n    return 'variable';\n  } // Handle non-detected items\n\n\n  stream.next();\n  return ERRORCLASS;\n}\n\nfunction tokenStringFactory(delimiter) {\n  var singleline = delimiter.length == 1;\n  var OUTCLASS = 'string';\n  return function (stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"]/);\n\n      if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return OUTCLASS;\n      } else {\n        stream.eat(/['\"]/);\n      }\n    }\n\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n\n    return OUTCLASS;\n  };\n}\n\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current(); // Handle '.' connected identifiers\n\n  if (current === '.') {\n    style = state.tokenize(stream, state);\n\n    if (style === 'variable') {\n      return 'variable';\n    } else {\n      return ERRORCLASS;\n    }\n  }\n\n  var delimiter_index = '[({'.indexOf(current);\n\n  if (delimiter_index !== -1) {\n    indent(stream, state);\n  }\n\n  if (indentInfo === 'dedent') {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n\n  delimiter_index = '])}'.indexOf(current);\n\n  if (delimiter_index !== -1) {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n\n  return style;\n}\n\nexport var vb = {\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      lastToken: null,\n      currentIndent: 0,\n      nextLineIndent: 0,\n      doInCurrentLine: false\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol()) {\n      state.currentIndent += state.nextLineIndent;\n      state.nextLineIndent = 0;\n      state.doInCurrentLine = 0;\n    }\n\n    var style = tokenLexer(stream, state);\n    state.lastToken = {\n      style: style,\n      content: stream.current()\n    };\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n    if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit * (state.currentIndent - 1);\n    if (state.currentIndent < 0) return 0;\n    return state.currentIndent * cx.unit;\n  },\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    },\n    commentTokens: {\n      line: \"'\"\n    },\n    autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords).concat(operatorKeywords).concat(commonKeywords).concat(commontypes)\n  }\n};"],"sourceRoot":""}