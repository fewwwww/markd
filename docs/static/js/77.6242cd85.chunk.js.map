{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/r.js"],"names":["wordObj","words","res","i","length","curPunc","commonAtoms","commonBuiltins","commonKeywords","atoms","builtins","keywords","blockkeywords","opChars","tokenBase","stream","state","quote","ch","next","skipToEnd","eat","eatWhile","match","test","tokenize","skipTo","backUp","word","current","propertyIsEnumerable","ctx","argList","push","type","indent","flags","column","prev","setFlag","flag","pop","r","startState","indentUnit","afterIdent","token","sol","indentation","eatSpace","style","textAfter","cx","firstChar","charAt","closing","unit","languageData","wordChars","commentTokens","line","autocomplete","concat"],"mappings":"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","file":"static/js/77.6242cd85.chunk.js","sourcesContent":["function wordObj(words) {\n  var res = {};\n\n  for (var i = 0; i < words.length; ++i) {\n    res[words[i]] = true;\n  }\n\n  return res;\n}\n\nvar commonAtoms = [\"NULL\", \"NA\", \"Inf\", \"NaN\", \"NA_integer_\", \"NA_real_\", \"NA_complex_\", \"NA_character_\", \"TRUE\", \"FALSE\"];\nvar commonBuiltins = [\"list\", \"quote\", \"bquote\", \"eval\", \"return\", \"call\", \"parse\", \"deparse\"];\nvar commonKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\", \"in\", \"next\", \"break\"];\nvar commonBlockKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\"];\nvar atoms = wordObj(commonAtoms);\nvar builtins = wordObj(commonBuiltins);\nvar keywords = wordObj(commonKeywords);\nvar blockkeywords = wordObj(commonBlockKeywords);\nvar opChars = /[+\\-*\\/^<>=!&|~$:]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  curPunc = null;\n  var ch = stream.next();\n\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"0\" && stream.eat(\"x\")) {\n    stream.eatWhile(/[\\da-f]/i);\n    return \"number\";\n  } else if (ch == \".\" && stream.eat(/\\d/)) {\n    stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n    return \"number\";\n  } else if (ch == \"'\" || ch == '\"') {\n    state.tokenize = tokenString(ch);\n    return \"string\";\n  } else if (ch == \"`\") {\n    stream.match(/[^`]+`/);\n    return \"string.special\";\n  } else if (ch == \".\" && stream.match(/.(?:[.]|\\d+)/)) {\n    return \"keyword\";\n  } else if (/[a-zA-Z\\.]/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    var word = stream.current();\n    if (atoms.propertyIsEnumerable(word)) return \"atom\";\n\n    if (keywords.propertyIsEnumerable(word)) {\n      // Block keywords start new blocks, except 'else if', which only starts\n      // one new block for the 'if', no block for the 'else'.\n      if (blockkeywords.propertyIsEnumerable(word) && !stream.match(/\\s*if(\\s+|$)/, false)) curPunc = \"block\";\n      return \"keyword\";\n    }\n\n    if (builtins.propertyIsEnumerable(word)) return \"builtin\";\n    return \"variable\";\n  } else if (ch == \"%\") {\n    if (stream.skipTo(\"%\")) stream.next();\n    return \"variableName.special\";\n  } else if (ch == \"<\" && stream.eat(\"-\") || ch == \"<\" && stream.match(\"<-\") || ch == \"-\" && stream.match(/>>?/)) {\n    return \"operator\";\n  } else if (ch == \"=\" && state.ctx.argList) {\n    return \"operator\";\n  } else if (opChars.test(ch)) {\n    if (ch == \"$\") return \"operator\";\n    stream.eatWhile(opChars);\n    return \"operator\";\n  } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n    curPunc = ch;\n    if (ch == \";\") return \"punctuation\";\n    return null;\n  } else {\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    if (stream.eat(\"\\\\\")) {\n      var ch = stream.next();\n      if (ch == \"x\") stream.match(/^[a-f0-9]{2}/i);else if ((ch == \"u\" || ch == \"U\") && stream.eat(\"{\") && stream.skipTo(\"}\")) stream.next();else if (ch == \"u\") stream.match(/^[a-f0-9]{4}/i);else if (ch == \"U\") stream.match(/^[a-f0-9]{8}/i);else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n      return \"string.special\";\n    } else {\n      var next;\n\n      while ((next = stream.next()) != null) {\n        if (next == quote) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        if (next == \"\\\\\") {\n          stream.backUp(1);\n          break;\n        }\n      }\n\n      return \"string\";\n    }\n  };\n}\n\nvar ALIGN_YES = 1,\n    ALIGN_NO = 2,\n    BRACELESS = 4;\n\nfunction push(state, type, stream) {\n  state.ctx = {\n    type: type,\n    indent: state.indent,\n    flags: 0,\n    column: stream.column(),\n    prev: state.ctx\n  };\n}\n\nfunction setFlag(state, flag) {\n  var ctx = state.ctx;\n  state.ctx = {\n    type: ctx.type,\n    indent: ctx.indent,\n    flags: ctx.flags | flag,\n    column: ctx.column,\n    prev: ctx.prev\n  };\n}\n\nfunction pop(state) {\n  state.indent = state.ctx.indent;\n  state.ctx = state.ctx.prev;\n}\n\nexport var r = {\n  startState: function startState(indentUnit) {\n    return {\n      tokenize: tokenBase,\n      ctx: {\n        type: \"top\",\n        indent: -indentUnit,\n        flags: ALIGN_NO\n      },\n      indent: 0,\n      afterIdent: false\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol()) {\n      if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO;\n      if (state.ctx.flags & BRACELESS) pop(state);\n      state.indent = stream.indentation();\n    }\n\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    if (style != \"comment\" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES);\n    if ((curPunc == \";\" || curPunc == \"{\" || curPunc == \"}\") && state.ctx.type == \"block\") pop(state);\n    if (curPunc == \"{\") push(state, \"}\", stream);else if (curPunc == \"(\") {\n      push(state, \")\", stream);\n      if (state.afterIdent) state.ctx.argList = true;\n    } else if (curPunc == \"[\") push(state, \"]\", stream);else if (curPunc == \"block\") push(state, \"block\", stream);else if (curPunc == state.ctx.type) pop(state);else if (state.ctx.type == \"block\" && style != \"comment\") setFlag(state, BRACELESS);\n    state.afterIdent = style == \"variable\" || style == \"keyword\";\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (state.tokenize != tokenBase) return 0;\n    var firstChar = textAfter && textAfter.charAt(0),\n        ctx = state.ctx,\n        closing = firstChar == ctx.type;\n    if (ctx.flags & BRACELESS) ctx = ctx.prev;\n    if (ctx.type == \"block\") return ctx.indent + (firstChar == \"{\" ? 0 : cx.unit);else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);else return ctx.indent + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    wordChars: \".\",\n    commentTokens: {\n      line: \"#\"\n    },\n    autocomplete: commonAtoms.concat(commonBuiltins, commonKeywords)\n  }\n};"],"sourceRoot":""}