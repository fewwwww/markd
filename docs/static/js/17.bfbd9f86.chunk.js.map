{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/wast.js","../node_modules/@codemirror/legacy-modes/mode/simple-mode.js"],"names":["wast","start","regex","RegExp","join","token","next","indent","dedent","comment","meta","dontIndentStates","simpleMode","states","ensureState","states_","languageData","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","push","Rule","startState","pending","copyState","s","slice","stack","tokenFunction","indentFunction","name","Error","this","val","caret","flags","ignoreCase","source","String","toRegex","apply","replace","result","asToken","stream","pend","shift","pos","text","curState","rule","matches","sol","match","pop","indentation","indentUnit","j","backUp","textAfter","doneIndentState","indexOf","rules","scan","dedentIfLineStart","m","exec"],"mappings":"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","file":"static/js/17.bfbd9f86.chunk.js","sourcesContent":["import { simpleMode } from \"./simple-mode.js\";\nvar kKeywords = [\"align\", \"block\", \"br(_if|_table|_on_(cast|data|func|i31|null))?\", \"call(_indirect|_ref)?\", \"current_memory\", \"\\\\bdata\\\\b\", \"catch(_all)?\", \"delegate\", \"drop\", \"elem\", \"else\", \"end\", \"export\", \"\\\\bextern\\\\b\", \"\\\\bfunc\\\\b\", \"global(\\\\.(get|set))?\", \"if\", \"import\", \"local(\\\\.(get|set|tee))?\", \"loop\", \"module\", \"mut\", \"nop\", \"offset\", \"param\", \"result\", \"rethrow\", \"return(_call(_indirect|_ref)?)?\", \"select\", \"start\", \"table(\\\\.(size|get|set|size|grow|fill|init|copy))?\", \"then\", \"throw\", \"try\", \"type\", \"unreachable\", \"unwind\", // Numeric opcodes.\n\"i(32|64)\\\\.(store(8|16)|(load(8|16)_[su]))\", \"i64\\\\.(load32_[su]|store32)\", \"[fi](32|64)\\\\.(const|load|store)\", \"f(32|64)\\\\.(abs|add|ceil|copysign|div|eq|floor|[gl][et]|max|min|mul|nearest|neg?|sqrt|sub|trunc)\", \"i(32|64)\\\\.(a[dn]d|c[lt]z|(div|rem)_[su]|eqz?|[gl][te]_[su]|mul|ne|popcnt|rot[lr]|sh(l|r_[su])|sub|x?or)\", \"i64\\\\.extend_[su]_i32\", \"i32\\\\.wrap_i64\", \"i(32|64)\\\\.trunc_f(32|64)_[su]\", \"f(32|64)\\\\.convert_i(32|64)_[su]\", \"f64\\\\.promote_f32\", \"f32\\\\.demote_f64\", \"f32\\\\.reinterpret_i32\", \"i32\\\\.reinterpret_f32\", \"f64\\\\.reinterpret_i64\", \"i64\\\\.reinterpret_f64\", // Atomics.\n\"memory(\\\\.((atomic\\\\.(notify|wait(32|64)))|grow|size))?\", \"i64\\.atomic\\\\.(load32_u|store32|rmw32\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u)\", \"i(32|64)\\\\.atomic\\\\.(load((8|16)_u)?|store(8|16)?|rmw(\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)|(8|16)\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u))\", // SIMD.\n\"v128\\\\.load(8x8|16x4|32x2)_[su]\", \"v128\\\\.load(8|16|32|64)_splat\", \"v128\\\\.(load|store)(8|16|32|64)_lane\", \"v128\\\\.load(32|64)_zero\", \"v128\\.(load|store|const|not|andnot|and|or|xor|bitselect|any_true)\", \"i(8x16|16x8)\\\\.(extract_lane_[su]|(add|sub)_sat_[su]|avgr_u)\", \"i(8x16|16x8|32x4|64x2)\\\\.(neg|add|sub|abs|shl|shr_[su]|all_true|bitmask|eq|ne|[lg][te]_s)\", \"(i(8x16|16x8|32x4|64x2)|f(32x4|64x2))\\.(splat|replace_lane)\", \"i(8x16|16x8|32x4)\\\\.(([lg][te]_u)|((min|max)_[su]))\", \"f(32x4|64x2)\\\\.(neg|add|sub|abs|nearest|eq|ne|[lg][te]|sqrt|mul|div|min|max|ceil|floor|trunc)\", \"[fi](32x4|64x2)\\\\.extract_lane\", \"i8x16\\\\.(shuffle|swizzle|popcnt|narrow_i16x8_[su])\", \"i16x8\\\\.(narrow_i32x4_[su]|mul|extadd_pairwise_i8x16_[su]|q15mulr_sat_s)\", \"i16x8\\\\.(extend|extmul)_(low|high)_i8x16_[su]\", \"i32x4\\\\.(mul|dot_i16x8_s|trunc_sat_f64x2_[su]_zero)\", \"i32x4\\\\.((extend|extmul)_(low|high)_i16x8_|trunc_sat_f32x4_|extadd_pairwise_i16x8_)[su]\", \"i64x2\\\\.(mul|(extend|extmul)_(low|high)_i32x4_[su])\", \"f32x4\\\\.(convert_i32x4_[su]|demote_f64x2_zero)\", \"f64x2\\\\.(promote_low_f32x4|convert_low_i32x4_[su])\", // Reference types, function references, and GC.\n\"\\\\bany\\\\b\", \"array\\\\.len\", \"(array|struct)(\\\\.(new_(default_)?with_rtt|get(_[su])?|set))?\", \"\\\\beq\\\\b\", \"field\", \"i31\\\\.(new|get_[su])\", \"\\\\bnull\\\\b\", \"ref(\\\\.(([ai]s_(data|func|i31))|cast|eq|func|(is_|as_non_)?null|test))?\", \"rtt(\\\\.(canon|sub))?\"];\nexport var wast = simpleMode({\n  start: [{\n    regex: new RegExp(kKeywords.join('|')),\n    token: \"keyword\"\n  }, {\n    regex: /\\b((any|data|eq|extern|i31|func)ref|[fi](32|64)|i(8|16))\\b/,\n    token: \"atom\"\n  }, {\n    regex: /\\b(funcref|externref|[fi](32|64))\\b/,\n    token: \"atom\"\n  }, {\n    regex: /\\$([a-zA-Z0-9_`\\+\\-\\*\\/\\\\\\^~=<>!\\?@#$%&|:\\.]+)/,\n    token: \"variable\"\n  }, {\n    regex: /\"(?:[^\"\\\\\\x00-\\x1f\\x7f]|\\\\[nt\\\\'\"]|\\\\[0-9a-fA-F][0-9a-fA-F])*\"/,\n    token: \"string\"\n  }, {\n    regex: /\\(;.*?/,\n    token: \"comment\",\n    next: \"comment\"\n  }, {\n    regex: /;;.*$/,\n    token: \"comment\"\n  }, {\n    regex: /\\(/,\n    indent: true\n  }, {\n    regex: /\\)/,\n    dedent: true\n  }],\n  comment: [{\n    regex: /.*?;\\)/,\n    token: \"comment\",\n    next: \"start\"\n  }, {\n    regex: /.*/,\n    token: \"comment\"\n  }],\n  meta: {\n    dontIndentStates: ['comment']\n  }\n}); // https://github.com/WebAssembly/design/issues/981 mentions text/webassembly,\n// which seems like a reasonable choice, although it's not standard right now.","export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {},\n      meta = states.languageData || {},\n      hasIndentation = false;\n\n  for (var state in states) {\n    if (state != meta && states.hasOwnProperty(state)) {\n      var list = states_[state] = [],\n          orig = states[state];\n\n      for (var i = 0; i < orig.length; i++) {\n        var data = orig[i];\n        list.push(new Rule(data, states));\n        if (data.indent || data.dedent) hasIndentation = true;\n      }\n    }\n  }\n\n  return {\n    startState: function startState() {\n      return {\n        state: \"start\",\n        pending: null,\n        indent: hasIndentation ? [] : null\n      };\n    },\n    copyState: function copyState(state) {\n      var s = {\n        state: state.state,\n        pending: state.pending,\n        indent: state.indent && state.indent.slice(0)\n      };\n      if (state.stack) s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  };\n}\n;\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val;\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n\n  for (var i = 0; i < val.length; i++) {\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  }\n\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function (stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent) state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent) state.indent.pop();\n        var token = rule.token;\n        if (token && token.apply) token = token(matches);\n\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n\n          for (var j = 2; j < matches.length; j++) {\n            if (matches[j]) state.pending.push({\n              text: matches[j],\n              token: rule.token[j - 1]\n            });\n          }\n\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function (state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1) return null;\n    var pos = state.indent.length - 1,\n        rules = states[state.state];\n\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n\n      break;\n    }\n\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}"],"sourceRoot":""}