{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/protobuf.js"],"names":["keywordArray","keywords","RegExp","join","identifiers","protobuf","token","stream","eatSpace","match","skipToEnd","next","languageData","autocomplete"],"mappings":"qGAAA,gDAKA,IAAIA,EAAe,CAAC,UAAW,UAAW,SAAU,SAAU,WAAY,WAAY,WAAY,WAAY,UAAW,aAAc,SAAU,OAAQ,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,UAAW,WAAY,WAAY,SAAU,UAAW,MAAO,WACvUC,EALK,IAAIC,OAAO,MAKMF,EALQG,KAAK,OAAS,QAAS,KAMrDC,EAAc,IAAIF,OAAO,iDA2CtB,IAAIG,EAAW,CACpBC,MA1CF,SAAmBC,GAEjB,GAAIA,EAAOC,WAAY,OAAO,KAE9B,GAAID,EAAOE,MAAM,MAEf,OADAF,EAAOG,YACA,UAIT,GAAIH,EAAOE,MAAM,cAAc,GAAQ,CACrC,GAAIF,EAAOE,MAAM,wBAAyB,MAAO,SACjD,GAAIF,EAAOE,MAAM,mCAAoC,MAAO,SAC5D,GAAIF,EAAOE,MAAM,8BAA+B,MAAO,SAIzD,OAAIF,EAAOE,MAAM,mBACR,SAGLF,EAAOE,MAAM,mBACR,SAILF,EAAOE,MAAMR,GACR,UAGLM,EAAOE,MAAML,GACR,YAKTG,EAAOI,OACA,OAMPC,aAAc,CACZC,aAAcb","file":"static/js/73.cc95d598.chunk.js","sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\n;\nvar keywordArray = [\"package\", \"message\", \"import\", \"syntax\", \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\", \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"option\", \"service\", \"rpc\", \"returns\"];\nvar keywords = wordRegexp(keywordArray);\nvar identifiers = new RegExp(\"^[_A-Za-z\\xA1-\\uFFFF][_A-Za-z0-9\\xA1-\\uFFFF]*\");\n\nfunction tokenBase(stream) {\n  // whitespaces\n  if (stream.eatSpace()) return null; // Handle one line Comments\n\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } // Handle Number Literals\n\n\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+/)) return \"number\";\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n  } // Handle Strings\n\n\n  if (stream.match(/^\"([^\"]|(\"\"))*\"/)) {\n    return \"string\";\n  }\n\n  if (stream.match(/^'([^']|(''))*'/)) {\n    return \"string\";\n  } // Handle words\n\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(identifiers)) {\n    return \"variable\";\n  }\n\n  ; // Handle non-detected items\n\n  stream.next();\n  return null;\n}\n\n;\nexport var protobuf = {\n  token: tokenBase,\n  languageData: {\n    autocomplete: keywordArray\n  }\n};"],"sourceRoot":""}