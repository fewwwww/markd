{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/javascript.js"],"names":["mkJavaScript","parserConfig","type","content","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","backUp","lastType","string","slice","pos","expressionAllowed","inSet","readRegexp","current","tokenQuasi","eatWhile","start","lexical","word","propertyIsEnumerable","maybeEnd","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","cx","context","vars","marked","cc","pass","i","arguments","length","push","apply","inList","list","register","block","newContext","registerVarScoped","inner","Context","Var","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","indentUnit","token","sol","indentation","eatSpace","parseJS","textAfter","top","firstChar","c","closing","unit","isContinuedStatement","doubleIndentSwitch","languageData","indentOnInput","commentTokens","undefined","line","open","close","closeBrackets","brackets","wordChars","javascript"],"mappings":"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","file":"static/js/54.910c82b0.chunk.js","sourcesContent":["function mkJavaScript(parserConfig) {\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n  var keywords = function () {\n    function kw(type) {\n      return {\n        type: type,\n        style: \"keyword\"\n      };\n    }\n\n    var A = kw(\"keyword a\"),\n        B = kw(\"keyword b\"),\n        C = kw(\"keyword c\"),\n        D = kw(\"keyword d\");\n    var operator = kw(\"operator\"),\n        atom = {\n      type: \"atom\",\n      style: \"atom\"\n    };\n    return {\n      \"if\": kw(\"if\"),\n      \"while\": A,\n      \"with\": A,\n      \"else\": B,\n      \"do\": B,\n      \"try\": B,\n      \"finally\": B,\n      \"return\": D,\n      \"break\": D,\n      \"continue\": D,\n      \"new\": kw(\"new\"),\n      \"delete\": C,\n      \"void\": C,\n      \"throw\": C,\n      \"debugger\": kw(\"debugger\"),\n      \"var\": kw(\"var\"),\n      \"const\": kw(\"var\"),\n      \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"),\n      \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"),\n      \"switch\": kw(\"switch\"),\n      \"case\": kw(\"case\"),\n      \"default\": kw(\"default\"),\n      \"in\": operator,\n      \"typeof\": operator,\n      \"instanceof\": operator,\n      \"true\": atom,\n      \"false\": atom,\n      \"null\": atom,\n      \"undefined\": atom,\n      \"NaN\": atom,\n      \"Infinity\": atom,\n      \"this\": kw(\"this\"),\n      \"class\": kw(\"class\"),\n      \"super\": kw(\"atom\"),\n      \"yield\": C,\n      \"export\": kw(\"export\"),\n      \"import\": kw(\"import\"),\n      \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false,\n        next,\n        inSet = false;\n\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n  } // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n\n\n  var type, content;\n\n  function ret(tp, style, cont) {\n    type = tp;\n    content = cont;\n    return style;\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string.special\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\");\n    } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n      stream.skipToEnd();\n      return ret(\"comment\", \"comment\");\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch);\n          if (ch == \">\") stream.eat(ch);\n        }\n      }\n\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\");\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current();\n\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word];\n          return ret(kw.type, kw.style, word);\n        }\n\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n      }\n\n      return ret(\"variable\", \"variable\", word);\n    }\n  }\n\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false,\n          next;\n\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false,\n        ch;\n\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n\n      maybeEnd = ch == \"*\";\n    }\n\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false,\n        next;\n\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    return ret(\"quasi\", \"string.special\", stream.current());\n  }\n\n  var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) {\n      // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n      if (m) arrow = m.index;\n    }\n\n    var depth = 0,\n        sawSomething = false;\n\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) {\n          ++pos;\n          break;\n        }\n\n        if (--depth == 0) {\n          if (ch == \"(\") sawSomething = true;\n          break;\n        }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return;\n          var next = stream.string.charAt(pos - 1);\n\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n            pos--;\n            break;\n          }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  } // Parser\n\n\n  var atomicTypes = {\n    \"atom\": true,\n    \"number\": true,\n    \"variable\": true,\n    \"string\": true,\n    \"regexp\": true,\n    \"this\": true,\n    \"import\": true,\n    \"jsonld-keyword\": true\n  };\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next) {\n      if (v.name == varname) return true;\n    }\n\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next) {\n        if (v.name == varname) return true;\n      }\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc; // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n\n    cx.state = state;\n    cx.stream = stream;\n    cx.marked = null;\n    cx.cc = cc;\n    cx.style = style;\n    if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n    while (true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n      if (combinator(type, content)) {\n        while (cc.length && cc[cc.length - 1].lex) {\n          cc.pop()();\n        }\n\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n        return style;\n      }\n    }\n  } // Combinator utils\n\n\n  var cx = {\n    state: null,\n    column: null,\n    marked: null,\n    cc: null\n  };\n\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) {\n      cx.cc.push(arguments[i]);\n    }\n  }\n\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) {\n      if (v.name == name) return true;\n    }\n\n    return false;\n  }\n\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context);\n\n        if (newContext != null) {\n          state.context = newContext;\n          return;\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars);\n        return;\n      }\n    } // Fall through means this is global\n\n\n    if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n  }\n\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null;\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev);\n      if (!inner) return null;\n      if (inner == context.prev) return context;\n      return new Context(inner, context.vars, true);\n    } else if (inList(varname, context.vars)) {\n      return context;\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false);\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n  } // Combinators\n\n\n  function Context(prev, vars, block) {\n    this.prev = prev;\n    this.vars = vars;\n    this.block = block;\n  }\n\n  function Var(name, next) {\n    this.name = name;\n    this.next = next;\n  }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n    cx.state.localVars = defaultVars;\n  }\n\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n    cx.state.localVars = null;\n  }\n\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars;\n    cx.state.context = cx.state.context.prev;\n  }\n\n  popcontext.lex = true;\n\n  function pushlex(type, info) {\n    var result = function result() {\n      var state = cx.state,\n          indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) {\n        indent = outer.indented;\n      }\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n\n    result.lex = true;\n    return result;\n  }\n\n  function poplex() {\n    var state = cx.state;\n\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n    }\n\n    ;\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n\n    if (type == \"class\" || isTS && value == \"interface\") {\n      cx.marked = \"keyword\";\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n    }\n\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\";\n        return cont(statement);\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\";\n        if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), expression, statement, poplex);\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\";\n        return cont(statement);\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement);\n    if (value == \"@\") return cont(expression, statement);\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"));\n  }\n\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n\n  function parenExpr(type) {\n    if (type != \"(\") return pass();\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n  }\n\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n\n    if (type == \"class\" || isTS && value == \"interface\") {\n      cx.marked = \"keyword\";\n      return cont(pushlex(\"form\"), classExpression, poplex);\n    }\n\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n\n    if (type == \"quasi\") {\n      return pass(quasi, me);\n    }\n\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n    if (isTS && value == \"as\") {\n      cx.marked = \"keyword\";\n      return cont(typeexpr, me);\n    }\n\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\";\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n      return cont(expr);\n    }\n  }\n\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n\n  function maybeTarget(noComma) {\n    return function (type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n\n  function target(_, value) {\n    if (value == \"target\") {\n      cx.marked = \"keyword\";\n      return cont(maybeoperatorComma);\n    }\n  }\n\n  function targetNoComma(_, value) {\n    if (value == \"target\") {\n      cx.marked = \"keyword\";\n      return cont(maybeoperatorNoComma);\n    }\n  }\n\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n\n  function property(type) {\n    if (type == \"variable\") {\n      cx.marked = \"property\";\n      return cont();\n    }\n  }\n\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop);\n    }\n  }\n\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function (type, value) {\n          if (type == end || value == end) return pass();\n          return pass(what);\n        }, proceed);\n      }\n\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what);\n      return cont(expect(end));\n    }\n\n    return function (type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++) {\n      cx.cc.push(arguments[i]);\n    }\n\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n  }\n\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n    }\n  }\n\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\";\n      return cont();\n    }\n  }\n\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\";\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n    }\n\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\";\n      return cont(afterType);\n    }\n\n    if (value == \"|\" || value == \"&\") return cont(typeexpr);\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n    if (type == \"quasi\") return pass(quasiType, afterType);\n  }\n\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr);\n  }\n\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont();\n    if (type == \",\" || type == \";\") return cont(typeprops);\n    return pass(typeprop, typeprops);\n  }\n\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(typeprop);\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop);\n    } else if (type == \":\") {\n      return cont(typeexpr);\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop);\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont();\n    }\n  }\n\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n    if (type == \":\") return cont(typeexpr);\n    if (type == \"spread\") return cont(typearg);\n    return pass(typeexpr);\n  }\n\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n\n    if (value == \"extends\" || value == \"implements\") {\n      cx.marked = \"keyword\";\n      return cont(typeexpr);\n    }\n\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n  }\n\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n  }\n\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault);\n  }\n\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr);\n  }\n\n  function vardef(_, value) {\n    if (value == \"enum\") {\n      cx.marked = \"keyword\";\n      return cont(enumdef);\n    }\n\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\";\n      return cont(pattern);\n    }\n\n    if (type == \"variable\") {\n      register(value);\n      return cont();\n    }\n\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n\n  function eltpattern() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2);\n  }\n\n  function forspec2(type, value) {\n    if (type == \")\") return cont();\n    if (type == \";\") return cont(forspec2);\n\n    if (value == \"in\" || value == \"of\") {\n      cx.marked = \"keyword\";\n      return cont(expression, forspec2);\n    }\n\n    return pass(expression, forspec2);\n  }\n\n  function functiondef(type, value) {\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(functiondef);\n    }\n\n    if (type == \"variable\") {\n      register(value);\n      return cont(functiondef);\n    }\n\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n  }\n\n  function functiondecl(type, value) {\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(functiondecl);\n    }\n\n    if (type == \"variable\") {\n      register(value);\n      return cont(functiondecl);\n    }\n\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n  }\n\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\";\n      return cont(typename);\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n    }\n  }\n\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg);\n    if (type == \"spread\") return cont(funarg);\n\n    if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\";\n      return cont(funarg);\n    }\n\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n    return pass(pattern, maybetype, maybeAssign);\n  }\n\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n\n  function className(type, value) {\n    if (type == \"variable\") {\n      register(value);\n      return cont(classNameAfter);\n    }\n  }\n\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n    if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n\n  function classBody(type, value) {\n    if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n\n    if (isTS && type == \"(\") return pass(functiondecl, classBody);\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody);\n  }\n\n  function classfield(type, value) {\n    if (value == \"!\" || value == \"?\") return cont(classfield);\n    if (type == \":\") return cont(typeexpr, maybeAssign);\n    if (value == \"=\") return cont(expressionNoComma);\n    var context = cx.state.lexical.prev,\n        isInterface = context && context.info == \"interface\";\n    return pass(isInterface ? functiondecl : functiondef);\n  }\n\n  function afterExport(type, value) {\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(maybeFrom, expect(\";\"));\n    }\n\n    if (value == \"default\") {\n      cx.marked = \"keyword\";\n      return cont(expression, expect(\";\"));\n    }\n\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n\n  function exportField(type, value) {\n    if (value == \"as\") {\n      cx.marked = \"keyword\";\n      return cont(expect(\"variable\"));\n    }\n\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports);\n  }\n\n  function maybeAs(_type, value) {\n    if (value == \"as\") {\n      cx.marked = \"keyword\";\n      return cont(importSpec);\n    }\n  }\n\n  function maybeFrom(_type, value) {\n    if (value == \"from\") {\n      cx.marked = \"keyword\";\n      return cont(expression);\n    }\n  }\n\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n  }\n\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n  } // Interface\n\n\n  return {\n    startState: function startState(indentUnit) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical(-indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\") state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n    token: function token(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n    indent: function indent(state, textAfter, cx) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0),\n          lexical = state.lexical,\n          top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;else if (c != maybeelse && c != popcontext) break;\n      }\n\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) {\n        lexical = lexical.prev;\n      }\n\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n      var type = lexical.type,\n          closing = firstChar == type;\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + cx.unit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : cx.unit);\n    },\n    languageData: {\n      indentOnInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      commentTokens: jsonMode ? undefined : {\n        line: \"//\",\n        block: {\n          open: \"/*\",\n          close: \"*/\"\n        }\n      },\n      closeBrackets: {\n        brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]\n      },\n      wordChars: \"$\"\n    }\n  };\n}\n\n;\nexport var javascript = mkJavaScript({});\nexport var json = mkJavaScript({\n  json: true\n});\nexport var jsonld = mkJavaScript({\n  jsonld: true\n});\nexport var typescript = mkJavaScript({\n  typescript: true\n});"],"sourceRoot":""}