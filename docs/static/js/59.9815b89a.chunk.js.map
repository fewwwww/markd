{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/mathematica.js"],"names":["pFloat","pPrecision","reBaseForm","RegExp","reFloatForm","reIdInContext","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","backUp","match","end","escaped","prev","mathematica","startState","token","eatSpace","languageData","commentTokens","block","open","close"],"mappings":"qGAAA,mDACA,IAEIA,EAAS,+BAETC,EAAa,YAAcD,EAAS,MAEpCE,EAAa,IAAIC,OAAO,mDAA2CF,EAAa,2BAChFG,EAAc,IAAID,OAAO,MAAQH,EAASC,EAAa,0BACvDI,EAAgB,IAAIF,OAAO,kFAE/B,SAASG,EAAUC,EAAQC,GACzB,IAAIC,EAIJ,MAAW,OAFXA,EAAKF,EAAOG,SAGVF,EAAMG,SAAWC,EACVJ,EAAMG,SAASJ,EAAQC,IAIrB,MAAPC,GACEF,EAAOM,IAAI,MACbL,EAAMM,eACNN,EAAMG,SAAWI,EACVP,EAAMG,SAASJ,EAAQC,KAKlCD,EAAOS,OAAO,GAGVT,EAAOU,MAAMf,GAAY,GAAM,GAC1B,SAKLK,EAAOU,MAAMb,GAAa,GAAM,GAC3B,SAKLG,EAAOU,MAAM,wBAAwB,GAAM,GACtC,OAILV,EAAOU,MAAM,yDAAyD,GAAM,GACvE,OAILV,EAAOU,MAAM,8EAA8E,GAAM,GAC5F,iBAKLV,EAAOU,MAAM,mGAAmG,GAAM,GACjH,uBAMLV,EAAOU,MAAM,sDAAsD,GAAM,GACpE,uBAGLV,EAAOU,MAAM,8BAA8B,GAAM,GAC5C,uBAGLV,EAAOU,MAAM,8BAA8B,GAAM,GAC5C,uBAILV,EAAOU,MAAM,kCAAkC,GAAM,GAChD,YAILV,EAAOU,MAAM,uBAAuB,GAAM,GACrC,UAKLV,EAAOU,MAAM,0CAA0C,GAAM,GACxD,wBAILV,EAAOU,MAAMZ,GAAe,GAAM,GAC7B,UAILE,EAAOU,MAAM,8DAA8D,GAAM,GAC5E,YAITV,EAAOG,OAEA,UAGT,SAASE,EAAYL,EAAQC,GAK3B,IAJA,IAAIE,EACAQ,GAAM,EACNC,GAAU,EAEmB,OAAzBT,EAAOH,EAAOG,SAAiB,CACrC,GAAa,MAATA,IAAiBS,EAAS,CAC5BD,GAAM,EACN,MAGFC,GAAWA,GAAoB,OAATT,EAOxB,OAJIQ,IAAQC,IACVX,EAAMG,SAAWL,GAGZ,SAKT,SAASS,EAAaR,EAAQC,GAG5B,IAFA,IAAIY,EAAMV,EAEHF,EAAMM,aAAe,GAA+B,OAAzBJ,EAAOH,EAAOG,SACjC,MAATU,GAAyB,MAATV,GAAcF,EAAMM,eAC3B,MAATM,GAAyB,MAATV,GAAcF,EAAMM,eACxCM,EAAOV,EAOT,OAJIF,EAAMM,cAAgB,IACxBN,EAAMG,SAAWL,GAGZ,UAGF,IAAIe,EAAc,CACvBC,WAAY,WACV,MAAO,CACLX,SAAUL,EACVQ,aAAc,IAGlBS,MAAO,SAAehB,EAAQC,GAC5B,OAAID,EAAOiB,WAAmB,KACvBhB,EAAMG,SAASJ,EAAQC,IAEhCiB,aAAc,CACZC,cAAe,CACbC,MAAO,CACLC,KAAM,KACNC,MAAO","file":"static/js/59.9815b89a.chunk.js","sourcesContent":["// used pattern building blocks\nvar Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\nvar pBase = \"(?:\\\\d+)\";\nvar pFloat = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\nvar pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\nvar pPrecision = \"(?:`(?:`?\" + pFloat + \")?)\"; // regular expressions\n\nvar reBaseForm = new RegExp('(?:' + pBase + '(?:\\\\^\\\\^' + pFloatBase + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\nvar reFloatForm = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\nvar reIdInContext = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\nfunction tokenBase(stream, state) {\n  var ch; // get next character\n\n  ch = stream.next(); // string\n\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  } // comment\n\n\n  if (ch === '(') {\n    if (stream.eat('*')) {\n      state.commentLevel++;\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n  } // go back one character\n\n\n  stream.backUp(1); // look for numbers\n  // Numbers in a baseform\n\n  if (stream.match(reBaseForm, true, false)) {\n    return 'number';\n  } // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n  // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n\n\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  }\n  /* In[23] and Out[34] */\n\n\n  if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n    return 'atom';\n  } // usage\n\n\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n    return 'meta';\n  } // message\n\n\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n    return 'string.special';\n  } // this makes a look-ahead match for something like variable:{_Integer}\n  // the match is then forwarded to the mma-patterns tokenizer.\n\n\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n    return 'variableName.special';\n  } // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n  // Cannot start with a number, but can have numbers at any other position. Examples\n  // blub__Integer, a1_, b34_Integer32\n\n\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n    return 'variableName.special';\n  }\n\n  if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  } // Named characters in Mathematica, like \\[Gamma].\n\n\n  if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n    return 'character';\n  } // Match all braces separately\n\n\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  } // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n  // only one.\n\n\n  if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n    return 'variableName.constant';\n  } // Literals like variables, keywords, functions\n\n\n  if (stream.match(reIdInContext, true, false)) {\n    return 'keyword';\n  } // operators. Note that operators like @@ or /; are matched separately for each symbol.\n\n\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n    return 'operator';\n  } // everything else is an error\n\n\n  stream.next(); // advance the stream.\n\n  return 'error';\n}\n\nfunction tokenString(stream, state) {\n  var next,\n      end = false,\n      escaped = false;\n\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n\n    escaped = !escaped && next === '\\\\';\n  }\n\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n\n  return 'string';\n}\n\n;\n\nfunction tokenComment(stream, state) {\n  var prev, next;\n\n  while (state.commentLevel > 0 && (next = stream.next()) != null) {\n    if (prev === '(' && next === '*') state.commentLevel++;\n    if (prev === '*' && next === ')') state.commentLevel--;\n    prev = next;\n  }\n\n  if (state.commentLevel <= 0) {\n    state.tokenize = tokenBase;\n  }\n\n  return 'comment';\n}\n\nexport var mathematica = {\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      commentLevel: 0\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"(*\",\n        close: \"*)\"\n      }\n    }\n  }\n};"],"sourceRoot":""}