{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/python.js"],"names":["wordRegexp","words","RegExp","join","wordOperators","commonKeywords","commonBuiltins","top","state","scopes","length","mkPython","parserConf","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","myKeywords","myBuiltins","undefined","extra_keywords","concat","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","current","toLowerCase","indexOf","tokenize","delimiter","tokenOuter","charAt","substr","singleline","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","next","singleLineStringErrors","isString","formatStringFactory","tokenStringFactory","pop","push","indentUnit","align","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","column","pushBracketScope","slice","startState","token","addErr","textAfter","cx","scope","closing","unit","languageData","autocomplete","indentOnInput","commentTokens","line","closeBrackets","brackets","str","python","cython","split"],"mappings":"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","file":"static/js/75.3751ef30.chunk.js","sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\nvar commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"lambda\", \"pass\", \"raise\", \"return\", \"try\", \"while\", \"with\", \"yield\", \"in\"];\nvar commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\", \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\", \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\", \"Ellipsis\", \"__debug__\"];\n\nfunction top(state) {\n  return state.scopes[state.scopes.length - 1];\n}\n\nexport function mkPython(parserConf) {\n  var ERRORCLASS = \"error\";\n  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/; //               (Backwards-compatibility with old, cumbersome config system)\n\n  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters, parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/];\n\n  for (var i = 0; i < operators.length; i++) {\n    if (!operators[i]) operators.splice(i--, 1);\n  }\n\n  var hangingIndent = parserConf.hangingIndent;\n  var myKeywords = commonKeywords,\n      myBuiltins = commonBuiltins;\n  if (parserConf.extra_keywords != undefined) myKeywords = myKeywords.concat(parserConf.extra_keywords);\n  if (parserConf.extra_builtins != undefined) myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n  var py3 = !(parserConf.version && Number(parserConf.version) < 3);\n\n  if (py3) {\n    // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n    var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n    myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n    myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n    var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(fr))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  } else {\n    var identifiers = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;\n    myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n    myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\", \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\", \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n    var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  }\n\n  var keywords = wordRegexp(myKeywords);\n  var builtins = wordRegexp(myBuiltins); // tokenizers\n\n  function tokenBase(stream, state) {\n    var sol = stream.sol() && state.lastToken != \"\\\\\";\n    if (sol) state.indent = stream.indentation(); // Handle scope changes\n\n    if (sol && top(state).type == \"py\") {\n      var scopeOffset = top(state).offset;\n\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset) pushPyScope(stream, state);else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\") state.errorToken = true;\n        return null;\n      } else {\n        var style = tokenBaseInner(stream, state);\n        if (scopeOffset > 0 && dedent(stream, state)) style += \" \" + ERRORCLASS;\n        return style;\n      }\n    }\n\n    return tokenBaseInner(stream, state);\n  }\n\n  function tokenBaseInner(stream, state, inFormat) {\n    if (stream.eatSpace()) return null; // Handle Comments\n\n    if (!inFormat && stream.match(/^#.*/)) return \"comment\"; // Handle Number Literals\n\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var floatLiteral = false; // Floats\n\n      if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n        floatLiteral = true;\n      }\n\n      if (stream.match(/^[\\d_]+\\.\\d*/)) {\n        floatLiteral = true;\n      }\n\n      if (stream.match(/^\\.\\d+/)) {\n        floatLiteral = true;\n      }\n\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return \"number\";\n      } // Integers\n\n\n      var intLiteral = false; // Hex\n\n      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true; // Binary\n\n      if (stream.match(/^0b[01_]+/i)) intLiteral = true; // Octal\n\n      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true; // Decimal\n\n      if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n        intLiteral = true;\n      } // Zero by itself with no other piece of number.\n\n\n      if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return \"number\";\n      }\n    } // Handle Strings\n\n\n    if (stream.match(stringPrefixes)) {\n      var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n\n      if (!isFmtString) {\n        state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      } else {\n        state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      }\n    }\n\n    for (var i = 0; i < operators.length; i++) {\n      if (stream.match(operators[i])) return \"operator\";\n    }\n\n    if (stream.match(delimiters)) return \"punctuation\";\n    if (state.lastToken == \".\" && stream.match(identifiers)) return \"property\";\n    if (stream.match(keywords) || stream.match(wordOperators)) return \"keyword\";\n    if (stream.match(builtins)) return \"builtin\";\n    if (stream.match(/^(self|cls)\\b/)) return \"self\";\n\n    if (stream.match(identifiers)) {\n      if (state.lastToken == \"def\" || state.lastToken == \"class\") return \"def\";\n      return \"variable\";\n    } // Handle non-detected items\n\n\n    stream.next();\n    return inFormat ? null : ERRORCLASS;\n  }\n\n  function formatStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {\n      delimiter = delimiter.substr(1);\n    }\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenNestedExpr(depth) {\n      return function (stream, state) {\n        var inner = tokenBaseInner(stream, state, true);\n\n        if (inner == \"punctuation\") {\n          if (stream.current() == \"{\") {\n            state.tokenize = tokenNestedExpr(depth + 1);\n          } else if (stream.current() == \"}\") {\n            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);else state.tokenize = tokenString;\n          }\n        }\n\n        return inner;\n      };\n    }\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else if (stream.match('{{')) {\n          // ignore {{ in f-str\n          return OUTCLASS;\n        } else if (stream.match('{', false)) {\n          // switch to nested mode\n          state.tokenize = tokenNestedExpr(0);\n          if (stream.current()) return OUTCLASS;else return state.tokenize(stream, state);\n        } else if (stream.match('}}')) {\n          return OUTCLASS;\n        } else if (stream.match('}')) {\n          // single } in f-string is an error\n          return ERRORCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n      }\n\n      return OUTCLASS;\n    }\n\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function tokenStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {\n      delimiter = delimiter.substr(1);\n    }\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n      }\n\n      return OUTCLASS;\n    }\n\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function pushPyScope(stream, state) {\n    while (top(state).type != \"py\") {\n      state.scopes.pop();\n    }\n\n    state.scopes.push({\n      offset: top(state).offset + stream.indentUnit,\n      type: \"py\",\n      align: null\n    });\n  }\n\n  function pushBracketScope(stream, state, type) {\n    var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1;\n    state.scopes.push({\n      offset: state.indent + (hangingIndent || stream.indentUnit),\n      type: type,\n      align: align\n    });\n  }\n\n  function dedent(stream, state) {\n    var indented = stream.indentation();\n\n    while (state.scopes.length > 1 && top(state).offset > indented) {\n      if (top(state).type != \"py\") return true;\n      state.scopes.pop();\n    }\n\n    return top(state).offset != indented;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) {\n      state.beginningOfLine = true;\n      state.dedent = false;\n    }\n\n    var style = state.tokenize(stream, state);\n    var current = stream.current(); // Handle decorators\n\n    if (state.beginningOfLine && current == \"@\") return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n    if (/\\S/.test(current)) state.beginningOfLine = false;\n    if ((style == \"variable\" || style == \"builtin\") && state.lastToken == \"meta\") style = \"meta\"; // Handle scope changes.\n\n    if (current == \"pass\" || current == \"return\") state.dedent = true;\n    if (current == \"lambda\") state.lambda = true;\n    if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false)) pushPyScope(stream, state);\n\n    if (current.length == 1 && !/string|comment/.test(style)) {\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index != -1) pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n      delimiter_index = \"])}\".indexOf(current);\n\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit);else return ERRORCLASS;\n      }\n    }\n\n    if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1) state.scopes.pop();\n    return style;\n  }\n\n  return {\n    startState: function startState() {\n      return {\n        tokenize: tokenBase,\n        scopes: [{\n          offset: 0,\n          type: \"py\",\n          align: null\n        }],\n        indent: 0,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n    token: function token(stream, state) {\n      var addErr = state.errorToken;\n      if (addErr) state.errorToken = false;\n      var style = tokenLexer(stream, state);\n      if (style && style != \"comment\") state.lastToken = style == \"keyword\" || style == \"punctuation\" ? stream.current() : style;\n      if (style == \"punctuation\") style = null;\n      if (stream.eol() && state.lambda) state.lambda = false;\n      return addErr ? ERRORCLASS : style;\n    },\n    indent: function indent(state, textAfter, cx) {\n      if (state.tokenize != tokenBase) return state.tokenize.isString ? null : 0;\n      var scope = top(state);\n      var closing = scope.type == textAfter.charAt(0) || scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);\n      if (scope.align != null) return scope.align - (closing ? 1 : 0);else return scope.offset - (closing ? hangingIndent || cx.unit : 0);\n    },\n    languageData: {\n      autocomplete: commonKeywords.concat(commonBuiltins),\n      indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      commentTokens: {\n        line: \"#\"\n      },\n      closeBrackets: {\n        brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']\n      }\n    }\n  };\n}\n;\n\nvar words = function words(str) {\n  return str.split(\" \");\n};\n\nexport var python = mkPython({});\nexport var cython = mkPython({\n  extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \" + \"extern gil include nogil property public \" + \"readonly struct union DEF IF ELIF ELSE\")\n});"],"sourceRoot":""}