{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.js"],"names":["words","str","obj","split","i","length","curPunc","parserConfig","name","keywords","fileNCtrlMaskOptions","externalCommands","multiLineStrings","indentStatements","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","afterNext","peek","toLowerCase","test","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","ttcnCfg","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line"],"mappings":"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","file":"static/js/95.e399c779.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) {\n    obj[words[i]] = true;\n  }\n\n  return obj;\n}\n\nvar parserConfig = {\n  name: \"ttcn-cfg\",\n  keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" + \" TimeStampFormat LogEventTypes SourceInfoFormat\" + \" LogEntityName LogSourceInfo DiskFullAction\" + \" LogFileNumber LogFileSize MatchingHints Detailed\" + \" Compact SubCategories Stack Single None Seconds\" + \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" + \" NumHCs UnixSocketsEnabled LocalAddress\"),\n  fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" + \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" + \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" + \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" + \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" + \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" + \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" + \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" + \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" + \" DEBUG_ENCDEC DEBUG_TESTPORT\" + \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" + \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" + \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" + \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" + \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" + \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" + \" FUNCTION_RND FUNCTION_UNQUALIFIED\" + \" MATCHING_DONE MATCHING_MCSUCCESS\" + \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" + \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" + \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" + \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" + \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" + \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" + \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" + \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" + \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" + \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" + \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" + \" PORTEVENT_PCOUT PORTEVENT_PMIN\" + \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" + \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" + \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" + \" TESTCASE_FINISH TESTCASE_START\" + \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" + \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" + \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" + \" USER_UNQUALIFIED VERDICTOP_FINAL\" + \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" + \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n  externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" + \" EndTestCase\"),\n  multiLineStrings: true\n};\nvar keywords = parserConfig.keywords,\n    fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions,\n    externalCommands = parserConfig.externalCommands,\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[\\|]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (/[:=]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n\n  if (ch == \"[\") {\n    stream.eatWhile(/[\\w_\\]]/);\n    return \"number\";\n  }\n\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (fileNCtrlMaskOptions.propertyIsEnumerable(cur)) return \"atom\";\n  if (externalCommands.propertyIsEnumerable(cur)) return \"deleted\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        var afterNext = stream.peek(); //look if the character if the quote is like the B in '10100010'B\n\n        if (afterNext) {\n          afterNext = afterNext.toLowerCase();\n          if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n        }\n\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n} //Interface\n\n\nexport var ttcnCfg = {\n  startState: function startState() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n      popContext(state);\n    } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") {\n        ctx = popContext(state);\n      }\n\n      if (ctx.type == \"}\") ctx = popContext(state);\n\n      while (ctx.type == \"statement\") {\n        ctx = popContext(state);\n      }\n    } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n    state.startOfLine = false;\n    return style;\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};"],"sourceRoot":""}