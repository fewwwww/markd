{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/mscgen.js"],"names":["mkParser","lang","startState","startStateFn","copyState","copyStateFn","token","pConfig","pStream","pState","match","wordRegexp","brackets","inComment","singlecomment","skipToEnd","inString","keywords","wordRegexpBoundary","options","arcsWords","arcsOthers","operators","constants","inAttributeList","attributes","next","languageData","commentTokens","line","block","open","close","mscgen","msgenny","xu","pWords","RegExp","join","inScript"],"mappings":"mGAAA,SAASA,EAASC,GAChB,MAAO,CACLC,WAAYC,EACZC,UAAWC,EACXC,OA2E0BC,EA3EEN,EA4EvB,SAAUO,EAASC,GACxB,GAAID,EAAQE,MAAMC,EAAWJ,EAAQK,WAAW,GAAM,GACpD,MAAO,UAKT,IAAKH,EAAOI,UAAW,CACrB,GAAIL,EAAQE,MAAM,gBAAgB,GAAM,GAEtC,OADAD,EAAOI,WAAY,EACZ,UAGT,GAAIL,EAAQE,MAAMC,EAAWJ,EAAQO,gBAAgB,GAAM,GAEzD,OADAN,EAAQO,YACD,UAIX,GAAIN,EAAOI,UAET,OADIL,EAAQE,MAAM,gBAAgB,GAAM,GAAOD,EAAOI,WAAY,EAAWL,EAAQO,YAC9E,UAKT,IAAKN,EAAOO,UAAYR,EAAQE,MAAM,mBAAmB,GAAM,GAE7D,OADAD,EAAOO,UAAW,EACX,SAGT,GAAIP,EAAOO,SAET,OADIR,EAAQE,MAAM,YAAY,GAAM,GAAOD,EAAOO,UAAW,EAAWR,EAAQO,YACzE,SAKT,GAAMR,EAAQU,UAAYT,EAAQE,MAAMQ,EAAmBX,EAAQU,WAAW,GAAM,GAAO,MAAO,UAClG,GAAIT,EAAQE,MAAMQ,EAAmBX,EAAQY,UAAU,GAAM,GAAO,MAAO,UAC3E,GAAIX,EAAQE,MAAMQ,EAAmBX,EAAQa,YAAY,GAAM,GAAO,MAAO,UAC7E,GAAIZ,EAAQE,MAAMC,EAAWJ,EAAQc,aAAa,GAAM,GAAO,MAAO,UACtE,GAAMd,EAAQe,WAAad,EAAQE,MAAMC,EAAWJ,EAAQe,YAAY,GAAM,GAAO,MAAO,WAC5F,GAAMf,EAAQgB,WAAaf,EAAQE,MAAMC,EAAWJ,EAAQgB,YAAY,GAAM,GAAO,MAAO,WAG5F,IAAKhB,EAAQiB,iBAAqBjB,EAAQkB,YAAcjB,EAAQE,MAAM,KAAK,GAAM,GAE/E,OADAH,EAAQiB,iBAAkB,EACnB,UAGT,GAAIjB,EAAQiB,gBAAiB,CAC3B,GAA2B,OAAvBjB,EAAQkB,YAAuBjB,EAAQE,MAAMQ,EAAmBX,EAAQkB,aAAa,GAAM,GAC7F,MAAO,YAGT,GAAIjB,EAAQE,MAAM,KAAK,GAAM,GAE3B,OADAH,EAAQiB,iBAAkB,EACnB,UAKX,OADAhB,EAAQkB,OACD,OA1IPC,aAAc,CACZC,cAAe,CACbC,KAAM,IACNC,MAAO,CACLC,KAAM,KACNC,MAAO,SAqEjB,IAA8BzB,EA/E9B,yHAiBO,IAAI0B,EAASjC,EAAS,CAC3B,SAAY,CAAC,OACb,QAAW,CAAC,SAAU,QAAS,cAAe,gBAC9C,UAAa,CAAC,OAAQ,QAAS,KAAM,OACrC,WAAc,CAAC,QAAS,QAAS,KAAM,MAAO,YAAa,aAAc,YAAa,aAAc,cAAe,eAAgB,eAAgB,gBAAiB,eAAgB,gBAAiB,iBAAkB,kBAAmB,WAC1O,SAAY,CAAC,MAAO,OAEpB,UAAa,CAAC,OAAQ,OAAQ,OAAQ,OACtC,WAAc,CAAC,YAAa,YAAa,MAAO,KAAM,MAAO,KAAM,QAAS,MAAO,SAAU,OAAQ,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MACtL,cAAiB,CAAC,KAAM,KACxB,UAAa,CAAC,OAELkC,EAAUlC,EAAS,CAC5B,SAAY,KACZ,QAAW,CAAC,SAAU,QAAS,cAAe,eAAgB,mBAAoB,aAClF,UAAa,CAAC,OAAQ,QAAS,KAAM,MAAO,QAC5C,WAAc,KACd,SAAY,CAAC,MAAO,OACpB,UAAa,CAAC,OAAQ,OAAQ,OAAQ,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,MAAO,SAAU,MAAO,WAAY,SAAU,WAAY,SAAU,OAAQ,MAAO,OACtK,WAAc,CAAC,YAAa,YAAa,MAAO,KAAM,MAAO,KAAM,QAAS,MAAO,SAAU,OAAQ,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MACtL,cAAiB,CAAC,KAAM,KACxB,UAAa,CAAC,OAELmC,EAAKnC,EAAS,CACvB,SAAY,CAAC,MAAO,MACpB,QAAW,CAAC,SAAU,QAAS,cAAe,eAAgB,mBAAoB,aAClF,UAAa,CAAC,OAAQ,QAAS,KAAM,MAAO,QAC5C,WAAc,CAAC,QAAS,QAAS,KAAM,MAAO,YAAa,aAAc,YAAa,aAAc,cAAe,eAAgB,eAAgB,gBAAiB,eAAgB,gBAAiB,iBAAkB,kBAAmB,UAAW,QAAS,aAAc,WAAY,cACxR,SAAY,CAAC,MAAO,OAEpB,UAAa,CAAC,OAAQ,OAAQ,OAAQ,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,MAAO,SAAU,MAAO,WAAY,SAAU,WAAY,SAAU,OAAQ,MAAO,OACtK,WAAc,CAAC,YAAa,YAAa,MAAO,KAAM,MAAO,KAAM,QAAS,MAAO,SAAU,OAAQ,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MACtL,cAAiB,CAAC,KAAM,KACxB,UAAa,CAAC,OAGhB,SAASkB,EAAmBkB,GAC1B,OAAO,IAAIC,OAAO,QAAUD,EAAOE,KAAK,KAAO,OAAQ,KAGzD,SAAS3B,EAAWyB,GAClB,OAAO,IAAIC,OAAO,OAASD,EAAOE,KAAK,KAAO,IAAK,KAGrD,SAASnC,IACP,MAAO,CACLU,WAAW,EACXG,UAAU,EACVQ,iBAAiB,EACjBe,UAAU,GAId,SAASlC,EAAYI,GACnB,MAAO,CACLI,UAAWJ,EAAOI,UAClBG,SAAUP,EAAOO,SACjBQ,gBAAiBf,EAAOe,gBACxBe,SAAU9B,EAAO8B","file":"static/js/4.fed8acb8.chunk.js","sourcesContent":["function mkParser(lang) {\n  return {\n    startState: startStateFn,\n    copyState: copyStateFn,\n    token: produceTokenFunction(lang),\n    languageData: {\n      commentTokens: {\n        line: \"#\",\n        block: {\n          open: \"/*\",\n          close: \"*/\"\n        }\n      }\n    }\n  };\n}\n\nexport var mscgen = mkParser({\n  \"keywords\": [\"msc\"],\n  \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n  \"constants\": [\"true\", \"false\", \"on\", \"off\"],\n  \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n  \"brackets\": [\"\\\\{\", \"\\\\}\"],\n  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\"],\n  \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\": [\"//\", \"#\"],\n  \"operators\": [\"=\"]\n});\nexport var msgenny = mkParser({\n  \"keywords\": null,\n  \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\": null,\n  \"brackets\": [\"\\\\{\", \"\\\\}\"],\n  \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\": [\"//\", \"#\"],\n  \"operators\": [\"=\"]\n});\nexport var xu = mkParser({\n  \"keywords\": [\"msc\", \"xu\"],\n  \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n  \"brackets\": [\"\\\\{\", \"\\\\}\"],\n  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\": [\"//\", \"#\"],\n  \"operators\": [\"=\"]\n});\n\nfunction wordRegexpBoundary(pWords) {\n  return new RegExp(\"^\\\\b(\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n}\n\nfunction wordRegexp(pWords) {\n  return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n}\n\nfunction startStateFn() {\n  return {\n    inComment: false,\n    inString: false,\n    inAttributeList: false,\n    inScript: false\n  };\n}\n\nfunction copyStateFn(pState) {\n  return {\n    inComment: pState.inComment,\n    inString: pState.inString,\n    inAttributeList: pState.inAttributeList,\n    inScript: pState.inScript\n  };\n}\n\nfunction produceTokenFunction(pConfig) {\n  return function (pStream, pState) {\n    if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n      return \"bracket\";\n    }\n    /* comments */\n\n\n    if (!pState.inComment) {\n      if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n        pState.inComment = true;\n        return \"comment\";\n      }\n\n      if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n        pStream.skipToEnd();\n        return \"comment\";\n      }\n    }\n\n    if (pState.inComment) {\n      if (pStream.match(/[^\\*\\/]*\\*\\//, true, true)) pState.inComment = false;else pStream.skipToEnd();\n      return \"comment\";\n    }\n    /* strings */\n\n\n    if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n      pState.inString = true;\n      return \"string\";\n    }\n\n    if (pState.inString) {\n      if (pStream.match(/[^\\\"]*\\\"/, true, true)) pState.inString = false;else pStream.skipToEnd();\n      return \"string\";\n    }\n    /* keywords & operators */\n\n\n    if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true)) return \"keyword\";\n    if (pStream.match(wordRegexpBoundary(pConfig.options), true, true)) return \"keyword\";\n    if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true)) return \"keyword\";\n    if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true)) return \"keyword\";\n    if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true)) return \"operator\";\n    if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true)) return \"variable\";\n    /* attribute lists */\n\n    if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n      pConfig.inAttributeList = true;\n      return \"bracket\";\n    }\n\n    if (pConfig.inAttributeList) {\n      if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n        return \"attribute\";\n      }\n\n      if (pStream.match(']', true, true)) {\n        pConfig.inAttributeList = false;\n        return \"bracket\";\n      }\n    }\n\n    pStream.next();\n    return null;\n  };\n}"],"sourceRoot":""}