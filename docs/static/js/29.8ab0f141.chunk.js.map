{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/cmake.js"],"names":["variable_regex","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","cmake","startState","token","eatSpace","ch","match","skipToEnd","eatWhile","tokenize"],"mappings":"oGAAA,iDAAIA,EAAiB,wBAErB,SAASC,EAAYC,EAAQC,GAK3B,IAJA,IAAIC,EACAC,EACAC,GAAY,GAERJ,EAAOK,QAAUH,EAAUF,EAAOM,SAAWL,EAAMM,SAAS,CAClE,GAAgB,MAAZL,GAA2B,MAARC,GAAiC,KAAjBF,EAAMM,QAAgB,CAC3DH,GAAY,EACZ,MAGFD,EAAOD,EAaT,OAVIE,GACFJ,EAAOQ,OAAO,GAGZN,GAAWD,EAAMM,QACnBN,EAAMQ,gBAAiB,EAEvBR,EAAMQ,gBAAiB,EAGlB,SAqDF,IAAIC,EAAQ,CACjBC,WAAY,WACV,IAAIV,EAAQ,CACZ,cAAqB,EACrB,WAAkB,EAClB,gBAAuB,EACvB,SAAgB,GAChB,OAAOA,GAETW,MAAO,SAAeZ,EAAQC,GAC5B,OAAID,EAAOa,WAAmB,KA5DlC,SAAkBb,EAAQC,GACxB,IAAIa,EAAKd,EAAOM,OAEhB,MAAW,MAAPQ,EACEd,EAAOe,MAAMjB,GACR,uBAGF,WAILG,EAAMQ,gBAERT,EAAOQ,OAAO,GACPT,EAAYC,EAAQC,IAKzBD,EAAOe,MAAM,gBAAkBf,EAAOe,MAAM,kBAC9Cf,EAAOQ,OAAO,GACP,OAGC,KAANM,GACFd,EAAOgB,YACA,WAIC,KAANF,GAAmB,KAANA,GAEfb,EAAMM,QAAUO,EAETf,EAAYC,EAAQC,IAGnB,KAANa,GAAmB,KAANA,EACR,UAGLA,EAAGC,MAAM,SACJ,UAGTf,EAAOiB,SAAS,SACT,MAcEC,CAASlB,EAAQC","file":"static/js/29.8ab0f141.chunk.js","sourcesContent":["var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\nfunction tokenString(stream, state) {\n  var current,\n      prev,\n      found_var = false;\n\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n\n    prev = current;\n  }\n\n  if (found_var) {\n    stream.backUp(1);\n  }\n\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n\n  return \"string\";\n}\n\nfunction tokenize(stream, state) {\n  var ch = stream.next(); // Have we found a variable?\n\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      return 'variableName.special';\n    }\n\n    return 'variable';\n  } // Should we still be looking for the end of a string?\n\n\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  } // Do we just have a function on our hands?\n  // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n\n\n  if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n    stream.backUp(1);\n    return 'def';\n  }\n\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } // Have we found a string?\n\n\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch; // Perform the looping function to find the end\n\n    return tokenString(stream, state);\n  }\n\n  if (ch == '(' || ch == ')') {\n    return 'bracket';\n  }\n\n  if (ch.match(/[0-9]/)) {\n    return 'number';\n  }\n\n  stream.eatWhile(/[\\w-]/);\n  return null;\n}\n\nexport var cmake = {\n  startState: function startState() {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    return tokenize(stream, state);\n  }\n};"],"sourceRoot":""}