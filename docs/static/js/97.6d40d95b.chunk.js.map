{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/turtle.js"],"names":["curPunc","wordRegexp","words","RegExp","join","keywords","operatorChars","tokenBase","stream","state","quote","ch","next","match","tokenize","escaped","test","skipToEnd","eatWhile","peek","word","current","pushContext","type","col","context","prev","indent","popContext","turtle","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"mappings":"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","file":"static/js/97.6d40d95b.chunk.js","sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\n\nvar ops = wordRegexp([]);\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\nvar operatorChars = /[*+\\-<>=&|]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  } else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  } else if (ch == \":\") {\n    return \"operator\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n\n    if (stream.peek() == \":\") {\n      return \"variableName.special\";\n    } else {\n      var word = stream.current();\n\n      if (keywords.test(word)) {\n        return \"meta\";\n      }\n\n      if (ch >= \"A\" && ch <= \"Z\") {\n        return \"comment\";\n      } else {\n        return \"keyword\";\n      }\n    }\n\n    var word = stream.current();\n    if (ops.test(word)) return null;else if (keywords.test(word)) return \"meta\";else return \"variable\";\n  }\n}\n\nfunction tokenLiteral(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        ch;\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n\n      escaped = !escaped && ch == \"\\\\\";\n    }\n\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n}\n\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport var turtle = {\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") {\n        popContext(state);\n      }\n\n      if (state.context && curPunc == state.context.type) popContext(state);\n    } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") {\n      context = context.prev;\n    }\n    var closing = context && firstChar == context.type;\n    if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};"],"sourceRoot":""}